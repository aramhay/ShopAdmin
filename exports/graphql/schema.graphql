input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type ActiveIngredients {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  published_at: DateTime
}

type ActiveIngredientsConnection {
  values: [ActiveIngredients]
  groupBy: ActiveIngredientsGroupBy
  aggregate: ActiveIngredientsAggregator
}

type ActiveIngredientsAggregator {
  count: Int
  totalCount: Int
}

type ActiveIngredientsGroupBy {
  id: [ActiveIngredientsConnectionId]
  created_at: [ActiveIngredientsConnectionCreated_at]
  updated_at: [ActiveIngredientsConnectionUpdated_at]
  name: [ActiveIngredientsConnectionName]
  published_at: [ActiveIngredientsConnectionPublished_at]
}

type ActiveIngredientsConnectionId {
  key: ID
  connection: ActiveIngredientsConnection
}

type ActiveIngredientsConnectionCreated_at {
  key: DateTime
  connection: ActiveIngredientsConnection
}

type ActiveIngredientsConnectionUpdated_at {
  key: DateTime
  connection: ActiveIngredientsConnection
}

type ActiveIngredientsConnectionName {
  key: String
  connection: ActiveIngredientsConnection
}

type ActiveIngredientsConnectionPublished_at {
  key: DateTime
  connection: ActiveIngredientsConnection
}

input ActiveIngredientInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editActiveIngredientInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createActiveIngredientInput {
  data: ActiveIngredientInput
}

type createActiveIngredientPayload {
  activeIngredient: ActiveIngredients
}

input updateActiveIngredientInput {
  where: InputID
  data: editActiveIngredientInput
}

type updateActiveIngredientPayload {
  activeIngredient: ActiveIngredients
}

input deleteActiveIngredientInput {
  where: InputID
}

type deleteActiveIngredientPayload {
  activeIngredient: ActiveIngredients
}

type ApprovedByUs {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  approved_by_us: String
  approved_by_us_text: String
  right_header_of_the_image: String
  right_text1_of_the_image: String
  right_text2_of_the_image: String
  images: UploadFile
  published_at: DateTime
}

input ApprovedByUsInput {
  header: String
  approved_by_us: String
  approved_by_us_text: String
  right_header_of_the_image: String
  right_text1_of_the_image: String
  right_text2_of_the_image: String
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editApprovedByUsInput {
  header: String
  approved_by_us: String
  approved_by_us_text: String
  right_header_of_the_image: String
  right_text1_of_the_image: String
  right_text2_of_the_image: String
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateApprovedByUsInput {
  data: editApprovedByUsInput
}

type updateApprovedByUsPayload {
  approvedByUs: ApprovedByUs
}

type deleteApprovedByUsPayload {
  approvedByUs: ApprovedByUs
}

type Beauty {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  productId: Long
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type BeautyConnection {
  values: [Beauty]
  groupBy: BeautyGroupBy
  aggregate: BeautyAggregator
}

type BeautyAggregator {
  count: Int
  totalCount: Int
}

type BeautyGroupBy {
  id: [BeautyConnectionId]
  created_at: [BeautyConnectionCreated_at]
  updated_at: [BeautyConnectionUpdated_at]
  productId: [BeautyConnectionProductId]
  published_at: [BeautyConnectionPublished_at]
}

type BeautyConnectionId {
  key: ID
  connection: BeautyConnection
}

type BeautyConnectionCreated_at {
  key: DateTime
  connection: BeautyConnection
}

type BeautyConnectionUpdated_at {
  key: DateTime
  connection: BeautyConnection
}

type BeautyConnectionProductId {
  key: ID
  connection: BeautyConnection
}

type BeautyConnectionPublished_at {
  key: DateTime
  connection: BeautyConnection
}

input BeautyInput {
  productId: Long
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBeautyInput {
  productId: Long
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBeautyInput {
  data: BeautyInput
}

type createBeautyPayload {
  beauty: Beauty
}

input updateBeautyInput {
  where: InputID
  data: editBeautyInput
}

type updateBeautyPayload {
  beauty: Beauty
}

input deleteBeautyInput {
  where: InputID
}

type deleteBeautyPayload {
  beauty: Beauty
}

type BenefitsRegistrationPage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  benefit: String
  icon: UploadFile
  published_at: DateTime
}

type BenefitsRegistrationPageConnection {
  values: [BenefitsRegistrationPage]
  groupBy: BenefitsRegistrationPageGroupBy
  aggregate: BenefitsRegistrationPageAggregator
}

type BenefitsRegistrationPageAggregator {
  count: Int
  totalCount: Int
}

type BenefitsRegistrationPageGroupBy {
  id: [BenefitsRegistrationPageConnectionId]
  created_at: [BenefitsRegistrationPageConnectionCreated_at]
  updated_at: [BenefitsRegistrationPageConnectionUpdated_at]
  benefit: [BenefitsRegistrationPageConnectionBenefit]
  icon: [BenefitsRegistrationPageConnectionIcon]
  published_at: [BenefitsRegistrationPageConnectionPublished_at]
}

type BenefitsRegistrationPageConnectionId {
  key: ID
  connection: BenefitsRegistrationPageConnection
}

type BenefitsRegistrationPageConnectionCreated_at {
  key: DateTime
  connection: BenefitsRegistrationPageConnection
}

type BenefitsRegistrationPageConnectionUpdated_at {
  key: DateTime
  connection: BenefitsRegistrationPageConnection
}

type BenefitsRegistrationPageConnectionBenefit {
  key: String
  connection: BenefitsRegistrationPageConnection
}

type BenefitsRegistrationPageConnectionIcon {
  key: ID
  connection: BenefitsRegistrationPageConnection
}

type BenefitsRegistrationPageConnectionPublished_at {
  key: DateTime
  connection: BenefitsRegistrationPageConnection
}

input BenefitsRegistrationPageInput {
  benefit: String
  icon: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBenefitsRegistrationPageInput {
  benefit: String
  icon: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBenefitsRegistrationPageInput {
  data: BenefitsRegistrationPageInput
}

type createBenefitsRegistrationPagePayload {
  benefitsRegistrationPage: BenefitsRegistrationPage
}

input updateBenefitsRegistrationPageInput {
  where: InputID
  data: editBenefitsRegistrationPageInput
}

type updateBenefitsRegistrationPagePayload {
  benefitsRegistrationPage: BenefitsRegistrationPage
}

input deleteBenefitsRegistrationPageInput {
  where: InputID
}

type deleteBenefitsRegistrationPagePayload {
  benefitsRegistrationPage: BenefitsRegistrationPage
}

type BillingAddresses {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  first_name: String!
  surname: String!
  address_line: String
  road: String!
  house_number: Float
  place: String!
  country: String
  postcode: String
  users_permissions_user: UsersPermissionsUser
  published_at: DateTime
}

type BillingAddressesConnection {
  values: [BillingAddresses]
  groupBy: BillingAddressesGroupBy
  aggregate: BillingAddressesAggregator
}

type BillingAddressesAggregator {
  count: Int
  totalCount: Int
  sum: BillingAddressesAggregatorSum
  avg: BillingAddressesAggregatorAvg
  min: BillingAddressesAggregatorMin
  max: BillingAddressesAggregatorMax
}

type BillingAddressesAggregatorSum {
  house_number: Float
}

type BillingAddressesAggregatorAvg {
  house_number: Float
}

type BillingAddressesAggregatorMin {
  house_number: Float
}

type BillingAddressesAggregatorMax {
  house_number: Float
}

type BillingAddressesGroupBy {
  id: [BillingAddressesConnectionId]
  created_at: [BillingAddressesConnectionCreated_at]
  updated_at: [BillingAddressesConnectionUpdated_at]
  first_name: [BillingAddressesConnectionFirst_name]
  surname: [BillingAddressesConnectionSurname]
  address_line: [BillingAddressesConnectionAddress_line]
  road: [BillingAddressesConnectionRoad]
  house_number: [BillingAddressesConnectionHouse_number]
  place: [BillingAddressesConnectionPlace]
  country: [BillingAddressesConnectionCountry]
  postcode: [BillingAddressesConnectionPostcode]
  users_permissions_user: [BillingAddressesConnectionUsers_permissions_user]
  published_at: [BillingAddressesConnectionPublished_at]
}

type BillingAddressesConnectionId {
  key: ID
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionCreated_at {
  key: DateTime
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionUpdated_at {
  key: DateTime
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionFirst_name {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionSurname {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionAddress_line {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionRoad {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionHouse_number {
  key: Float
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionPlace {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionCountry {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionPostcode {
  key: String
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionUsers_permissions_user {
  key: ID
  connection: BillingAddressesConnection
}

type BillingAddressesConnectionPublished_at {
  key: DateTime
  connection: BillingAddressesConnection
}

input BillingAddressInput {
  first_name: String!
  surname: String!
  address_line: String
  road: String!
  house_number: Float
  place: String!
  country: String
  postcode: String
  users_permissions_user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBillingAddressInput {
  first_name: String
  surname: String
  address_line: String
  road: String
  house_number: Float
  place: String
  country: String
  postcode: String
  users_permissions_user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBillingAddressInput {
  data: BillingAddressInput
}

type createBillingAddressPayload {
  billingAddress: BillingAddresses
}

input updateBillingAddressInput {
  where: InputID
  data: editBillingAddressInput
}

type updateBillingAddressPayload {
  billingAddress: BillingAddresses
}

input deleteBillingAddressInput {
  where: InputID
}

type deleteBillingAddressPayload {
  billingAddress: BillingAddresses
}

type Bookmark {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  users_permissions_user: UsersPermissionsUser
  video: Videos
  published_at: DateTime
}

type BookmarkConnection {
  values: [Bookmark]
  groupBy: BookmarkGroupBy
  aggregate: BookmarkAggregator
}

type BookmarkAggregator {
  count: Int
  totalCount: Int
}

type BookmarkGroupBy {
  id: [BookmarkConnectionId]
  created_at: [BookmarkConnectionCreated_at]
  updated_at: [BookmarkConnectionUpdated_at]
  users_permissions_user: [BookmarkConnectionUsers_permissions_user]
  video: [BookmarkConnectionVideo]
  published_at: [BookmarkConnectionPublished_at]
}

type BookmarkConnectionId {
  key: ID
  connection: BookmarkConnection
}

type BookmarkConnectionCreated_at {
  key: DateTime
  connection: BookmarkConnection
}

type BookmarkConnectionUpdated_at {
  key: DateTime
  connection: BookmarkConnection
}

type BookmarkConnectionUsers_permissions_user {
  key: ID
  connection: BookmarkConnection
}

type BookmarkConnectionVideo {
  key: ID
  connection: BookmarkConnection
}

type BookmarkConnectionPublished_at {
  key: DateTime
  connection: BookmarkConnection
}

input BookmarkInput {
  users_permissions_user: ID
  video: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBookmarkInput {
  users_permissions_user: ID
  video: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBookmarkInput {
  data: BookmarkInput
}

type createBookmarkPayload {
  bookmark: Bookmark
}

input updateBookmarkInput {
  where: InputID
  data: editBookmarkInput
}

type updateBookmarkPayload {
  bookmark: Bookmark
}

input deleteBookmarkInput {
  where: InputID
}

type deleteBookmarkPayload {
  bookmark: Bookmark
}

type BrandPageAllData {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  brand_page_section_3: BrandPageSection3
  brand_page_section_4: BrandPageSection4
  brand_page_section_5: BrandPageSection5
  published_at: DateTime
}

input BrandPageAllDatumInput {
  brand_page_section_3: ID
  brand_page_section_4: ID
  brand_page_section_5: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandPageAllDatumInput {
  brand_page_section_3: ID
  brand_page_section_4: ID
  brand_page_section_5: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateBrandPageAllDatumInput {
  data: editBrandPageAllDatumInput
}

type updateBrandPageAllDatumPayload {
  brandPageAllDatum: BrandPageAllData
}

type deleteBrandPageAllDatumPayload {
  brandPageAllDatum: BrandPageAllData
}

type BrandPageData {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header_title: String
  header_head: String
  header_text: String
  header_link: String
  header_btn: String
  header_img: UploadFile
  summary_img: UploadFile
  summary_title: String
  summary_head: String
  summary_head2: String
  summary_text: String
  summary_link: String
  summary_linktxt: String
  brand_portrait_title: String
  brand_portraid_head: String
  brand_portraid_desc: String
  brand_portraid_text: String
  brand_portraid_quote: String
  brand_portraid_img: UploadFile
  brand_portraid_imgtext: String
  active_ingridients_img: UploadFile
  active_ingridients_imgtext: String
  active_ingridients_title: String
  active_ingridients_header: String
  active_ingridients_text: String
  care_products_desc: String
  application_img: UploadFile
  application_imgtext: String
  aplication_title: String
  application_header: String
  application_text: String
  press_reviews_title: String
  press_reviews_header: String
  press_reviews_text: String
  press_reviews_img: UploadFile
  press_reviews_imgtext: String
  published_at: DateTime
  brand_page_section_3s(sort: String, limit: Int, start: Int, where: JSON): [BrandPageSection3]
  brand_page_section_4s(sort: String, limit: Int, start: Int, where: JSON): [BrandPageSection4]
  brand_page_section_5s(sort: String, limit: Int, start: Int, where: JSON): [BrandPageSection5]
}

type BrandPageDataConnection {
  values: [BrandPageData]
  groupBy: BrandPageDataGroupBy
  aggregate: BrandPageDataAggregator
}

type BrandPageDataAggregator {
  count: Int
  totalCount: Int
}

type BrandPageDataGroupBy {
  id: [BrandPageDataConnectionId]
  created_at: [BrandPageDataConnectionCreated_at]
  updated_at: [BrandPageDataConnectionUpdated_at]
  header_title: [BrandPageDataConnectionHeader_title]
  header_head: [BrandPageDataConnectionHeader_head]
  header_text: [BrandPageDataConnectionHeader_text]
  header_link: [BrandPageDataConnectionHeader_link]
  header_btn: [BrandPageDataConnectionHeader_btn]
  header_img: [BrandPageDataConnectionHeader_img]
  summary_img: [BrandPageDataConnectionSummary_img]
  summary_title: [BrandPageDataConnectionSummary_title]
  summary_head: [BrandPageDataConnectionSummary_head]
  summary_head2: [BrandPageDataConnectionSummary_head2]
  summary_text: [BrandPageDataConnectionSummary_text]
  summary_link: [BrandPageDataConnectionSummary_link]
  summary_linktxt: [BrandPageDataConnectionSummary_linktxt]
  brand_portrait_title: [BrandPageDataConnectionBrand_portrait_title]
  brand_portraid_head: [BrandPageDataConnectionBrand_portraid_head]
  brand_portraid_desc: [BrandPageDataConnectionBrand_portraid_desc]
  brand_portraid_text: [BrandPageDataConnectionBrand_portraid_text]
  brand_portraid_quote: [BrandPageDataConnectionBrand_portraid_quote]
  brand_portraid_img: [BrandPageDataConnectionBrand_portraid_img]
  brand_portraid_imgtext: [BrandPageDataConnectionBrand_portraid_imgtext]
  active_ingridients_img: [BrandPageDataConnectionActive_ingridients_img]
  active_ingridients_imgtext: [BrandPageDataConnectionActive_ingridients_imgtext]
  active_ingridients_title: [BrandPageDataConnectionActive_ingridients_title]
  active_ingridients_header: [BrandPageDataConnectionActive_ingridients_header]
  active_ingridients_text: [BrandPageDataConnectionActive_ingridients_text]
  care_products_desc: [BrandPageDataConnectionCare_products_desc]
  application_img: [BrandPageDataConnectionApplication_img]
  application_imgtext: [BrandPageDataConnectionApplication_imgtext]
  aplication_title: [BrandPageDataConnectionAplication_title]
  application_header: [BrandPageDataConnectionApplication_header]
  application_text: [BrandPageDataConnectionApplication_text]
  press_reviews_title: [BrandPageDataConnectionPress_reviews_title]
  press_reviews_header: [BrandPageDataConnectionPress_reviews_header]
  press_reviews_text: [BrandPageDataConnectionPress_reviews_text]
  press_reviews_img: [BrandPageDataConnectionPress_reviews_img]
  press_reviews_imgtext: [BrandPageDataConnectionPress_reviews_imgtext]
  published_at: [BrandPageDataConnectionPublished_at]
}

type BrandPageDataConnectionId {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionCreated_at {
  key: DateTime
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionUpdated_at {
  key: DateTime
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionHeader_title {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionHeader_head {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionHeader_text {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionHeader_link {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionHeader_btn {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionHeader_img {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_img {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_title {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_head {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_head2 {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_text {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_link {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionSummary_linktxt {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portrait_title {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portraid_head {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portraid_desc {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portraid_text {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portraid_quote {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portraid_img {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionBrand_portraid_imgtext {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionActive_ingridients_img {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionActive_ingridients_imgtext {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionActive_ingridients_title {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionActive_ingridients_header {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionActive_ingridients_text {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionCare_products_desc {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionApplication_img {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionApplication_imgtext {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionAplication_title {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionApplication_header {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionApplication_text {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionPress_reviews_title {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionPress_reviews_header {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionPress_reviews_text {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionPress_reviews_img {
  key: ID
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionPress_reviews_imgtext {
  key: String
  connection: BrandPageDataConnection
}

type BrandPageDataConnectionPublished_at {
  key: DateTime
  connection: BrandPageDataConnection
}

input BrandPageDatumInput {
  header_title: String
  header_head: String
  header_text: String
  header_link: String
  header_btn: String
  header_img: ID
  summary_img: ID
  summary_title: String
  summary_head: String
  summary_head2: String
  summary_text: String
  summary_link: String
  summary_linktxt: String
  brand_portrait_title: String
  brand_portraid_head: String
  brand_portraid_desc: String
  brand_portraid_text: String
  brand_portraid_quote: String
  brand_portraid_img: ID
  brand_portraid_imgtext: String
  active_ingridients_img: ID
  active_ingridients_imgtext: String
  active_ingridients_title: String
  active_ingridients_header: String
  active_ingridients_text: String
  brand_page_section_3s: [ID]
  care_products_desc: String
  application_img: ID
  application_imgtext: String
  aplication_title: String
  application_header: String
  application_text: String
  brand_page_section_4s: [ID]
  press_reviews_title: String
  press_reviews_header: String
  press_reviews_text: String
  press_reviews_img: ID
  press_reviews_imgtext: String
  brand_page_section_5s: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandPageDatumInput {
  header_title: String
  header_head: String
  header_text: String
  header_link: String
  header_btn: String
  header_img: ID
  summary_img: ID
  summary_title: String
  summary_head: String
  summary_head2: String
  summary_text: String
  summary_link: String
  summary_linktxt: String
  brand_portrait_title: String
  brand_portraid_head: String
  brand_portraid_desc: String
  brand_portraid_text: String
  brand_portraid_quote: String
  brand_portraid_img: ID
  brand_portraid_imgtext: String
  active_ingridients_img: ID
  active_ingridients_imgtext: String
  active_ingridients_title: String
  active_ingridients_header: String
  active_ingridients_text: String
  brand_page_section_3s: [ID]
  care_products_desc: String
  application_img: ID
  application_imgtext: String
  aplication_title: String
  application_header: String
  application_text: String
  brand_page_section_4s: [ID]
  press_reviews_title: String
  press_reviews_header: String
  press_reviews_text: String
  press_reviews_img: ID
  press_reviews_imgtext: String
  brand_page_section_5s: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBrandPageDatumInput {
  data: BrandPageDatumInput
}

type createBrandPageDatumPayload {
  brandPageDatum: BrandPageData
}

input updateBrandPageDatumInput {
  where: InputID
  data: editBrandPageDatumInput
}

type updateBrandPageDatumPayload {
  brandPageDatum: BrandPageData
}

input deleteBrandPageDatumInput {
  where: InputID
}

type deleteBrandPageDatumPayload {
  brandPageDatum: BrandPageData
}

enum ENUM_BRANDPAGESECTION3_IMAGE_POSITION {
  left
  right
  summary
}

type BrandPageSection3 {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  link: String
  link_text: String
  text: String
  images: UploadFile
  image_position: ENUM_BRANDPAGESECTION3_IMAGE_POSITION!
  published_at: DateTime
}

type BrandPageSection3Connection {
  values: [BrandPageSection3]
  groupBy: BrandPageSection3GroupBy
  aggregate: BrandPageSection3Aggregator
}

type BrandPageSection3Aggregator {
  count: Int
  totalCount: Int
}

type BrandPageSection3GroupBy {
  id: [BrandPageSection3ConnectionId]
  created_at: [BrandPageSection3ConnectionCreated_at]
  updated_at: [BrandPageSection3ConnectionUpdated_at]
  link: [BrandPageSection3ConnectionLink]
  link_text: [BrandPageSection3ConnectionLink_text]
  text: [BrandPageSection3ConnectionText]
  images: [BrandPageSection3ConnectionImages]
  image_position: [BrandPageSection3ConnectionImage_position]
  published_at: [BrandPageSection3ConnectionPublished_at]
}

type BrandPageSection3ConnectionId {
  key: ID
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionCreated_at {
  key: DateTime
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionUpdated_at {
  key: DateTime
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionLink {
  key: String
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionLink_text {
  key: String
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionText {
  key: String
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionImages {
  key: ID
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionImage_position {
  key: String
  connection: BrandPageSection3Connection
}

type BrandPageSection3ConnectionPublished_at {
  key: DateTime
  connection: BrandPageSection3Connection
}

input BrandPageSection3Input {
  link: String
  link_text: String
  text: String
  images: ID
  image_position: ENUM_BRANDPAGESECTION3_IMAGE_POSITION!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandPageSection3Input {
  link: String
  link_text: String
  text: String
  images: ID
  image_position: ENUM_BRANDPAGESECTION3_IMAGE_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBrandPageSection3Input {
  data: BrandPageSection3Input
}

type createBrandPageSection3Payload {
  brandPageSection3: BrandPageSection3
}

input updateBrandPageSection3Input {
  where: InputID
  data: editBrandPageSection3Input
}

type updateBrandPageSection3Payload {
  brandPageSection3: BrandPageSection3
}

input deleteBrandPageSection3Input {
  where: InputID
}

type deleteBrandPageSection3Payload {
  brandPageSection3: BrandPageSection3
}

type BrandPageSection4 {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  number: Long
  text: String
  published_at: DateTime
}

type BrandPageSection4Connection {
  values: [BrandPageSection4]
  groupBy: BrandPageSection4GroupBy
  aggregate: BrandPageSection4Aggregator
}

type BrandPageSection4Aggregator {
  count: Int
  totalCount: Int
}

type BrandPageSection4GroupBy {
  id: [BrandPageSection4ConnectionId]
  created_at: [BrandPageSection4ConnectionCreated_at]
  updated_at: [BrandPageSection4ConnectionUpdated_at]
  number: [BrandPageSection4ConnectionNumber]
  text: [BrandPageSection4ConnectionText]
  published_at: [BrandPageSection4ConnectionPublished_at]
}

type BrandPageSection4ConnectionId {
  key: ID
  connection: BrandPageSection4Connection
}

type BrandPageSection4ConnectionCreated_at {
  key: DateTime
  connection: BrandPageSection4Connection
}

type BrandPageSection4ConnectionUpdated_at {
  key: DateTime
  connection: BrandPageSection4Connection
}

type BrandPageSection4ConnectionNumber {
  key: ID
  connection: BrandPageSection4Connection
}

type BrandPageSection4ConnectionText {
  key: String
  connection: BrandPageSection4Connection
}

type BrandPageSection4ConnectionPublished_at {
  key: DateTime
  connection: BrandPageSection4Connection
}

input BrandPageSection4Input {
  number: Long
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandPageSection4Input {
  number: Long
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBrandPageSection4Input {
  data: BrandPageSection4Input
}

type createBrandPageSection4Payload {
  brandPageSection4: BrandPageSection4
}

input updateBrandPageSection4Input {
  where: InputID
  data: editBrandPageSection4Input
}

type updateBrandPageSection4Payload {
  brandPageSection4: BrandPageSection4
}

input deleteBrandPageSection4Input {
  where: InputID
}

type deleteBrandPageSection4Payload {
  brandPageSection4: BrandPageSection4
}

type BrandPageSection5 {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  link: String
  link_text: String
  images: UploadFile
  published_at: DateTime
}

type BrandPageSection5Connection {
  values: [BrandPageSection5]
  groupBy: BrandPageSection5GroupBy
  aggregate: BrandPageSection5Aggregator
}

type BrandPageSection5Aggregator {
  count: Int
  totalCount: Int
}

type BrandPageSection5GroupBy {
  id: [BrandPageSection5ConnectionId]
  created_at: [BrandPageSection5ConnectionCreated_at]
  updated_at: [BrandPageSection5ConnectionUpdated_at]
  link: [BrandPageSection5ConnectionLink]
  link_text: [BrandPageSection5ConnectionLink_text]
  images: [BrandPageSection5ConnectionImages]
  published_at: [BrandPageSection5ConnectionPublished_at]
}

type BrandPageSection5ConnectionId {
  key: ID
  connection: BrandPageSection5Connection
}

type BrandPageSection5ConnectionCreated_at {
  key: DateTime
  connection: BrandPageSection5Connection
}

type BrandPageSection5ConnectionUpdated_at {
  key: DateTime
  connection: BrandPageSection5Connection
}

type BrandPageSection5ConnectionLink {
  key: String
  connection: BrandPageSection5Connection
}

type BrandPageSection5ConnectionLink_text {
  key: String
  connection: BrandPageSection5Connection
}

type BrandPageSection5ConnectionImages {
  key: ID
  connection: BrandPageSection5Connection
}

type BrandPageSection5ConnectionPublished_at {
  key: DateTime
  connection: BrandPageSection5Connection
}

input BrandPageSection5Input {
  link: String
  link_text: String
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandPageSection5Input {
  link: String
  link_text: String
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBrandPageSection5Input {
  data: BrandPageSection5Input
}

type createBrandPageSection5Payload {
  brandPageSection5: BrandPageSection5
}

input updateBrandPageSection5Input {
  where: InputID
  data: editBrandPageSection5Input
}

type updateBrandPageSection5Payload {
  brandPageSection5: BrandPageSection5
}

input deleteBrandPageSection5Input {
  where: InputID
}

type deleteBrandPageSection5Payload {
  brandPageSection5: BrandPageSection5
}

type Brand {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  published_at: DateTime
}

type BrandConnection {
  values: [Brand]
  groupBy: BrandGroupBy
  aggregate: BrandAggregator
}

type BrandAggregator {
  count: Int
  totalCount: Int
}

type BrandGroupBy {
  id: [BrandConnectionId]
  created_at: [BrandConnectionCreated_at]
  updated_at: [BrandConnectionUpdated_at]
  name: [BrandConnectionName]
  published_at: [BrandConnectionPublished_at]
}

type BrandConnectionId {
  key: ID
  connection: BrandConnection
}

type BrandConnectionCreated_at {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionUpdated_at {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionName {
  key: String
  connection: BrandConnection
}

type BrandConnectionPublished_at {
  key: DateTime
  connection: BrandConnection
}

input BrandInput {
  name: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBrandInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBrandInput {
  data: BrandInput
}

type createBrandPayload {
  brand: Brand
}

input updateBrandInput {
  where: InputID
  data: editBrandInput
}

type updateBrandPayload {
  brand: Brand
}

input deleteBrandInput {
  where: InputID
}

type deleteBrandPayload {
  brand: Brand
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  CategoryName: String!
  published_at: DateTime
  sub_categories(sort: String, limit: Int, start: Int, where: JSON): [SubCategory]
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  CategoryName: [CategoryConnectionCategoryName]
  published_at: [CategoryConnectionPublished_at]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionCategoryName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionPublished_at {
  key: DateTime
  connection: CategoryConnection
}

input CategoryInput {
  CategoryName: String!
  sub_categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  CategoryName: String
  sub_categories: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

enum ENUM_COLLECTIONSHOP_POSITION {
  HomePageLeft
  HomePageRight
  HerrenPageLeft
  HerrenPageRight
}

type CollectionShop {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  title: String
  url: String
  images: UploadFile
  Link_text: String
  position: ENUM_COLLECTIONSHOP_POSITION!
  published_at: DateTime
}

type CollectionShopConnection {
  values: [CollectionShop]
  groupBy: CollectionShopGroupBy
  aggregate: CollectionShopAggregator
}

type CollectionShopAggregator {
  count: Int
  totalCount: Int
}

type CollectionShopGroupBy {
  id: [CollectionShopConnectionId]
  created_at: [CollectionShopConnectionCreated_at]
  updated_at: [CollectionShopConnectionUpdated_at]
  header: [CollectionShopConnectionHeader]
  title: [CollectionShopConnectionTitle]
  url: [CollectionShopConnectionUrl]
  images: [CollectionShopConnectionImages]
  Link_text: [CollectionShopConnectionLink_text]
  position: [CollectionShopConnectionPosition]
  published_at: [CollectionShopConnectionPublished_at]
}

type CollectionShopConnectionId {
  key: ID
  connection: CollectionShopConnection
}

type CollectionShopConnectionCreated_at {
  key: DateTime
  connection: CollectionShopConnection
}

type CollectionShopConnectionUpdated_at {
  key: DateTime
  connection: CollectionShopConnection
}

type CollectionShopConnectionHeader {
  key: String
  connection: CollectionShopConnection
}

type CollectionShopConnectionTitle {
  key: String
  connection: CollectionShopConnection
}

type CollectionShopConnectionUrl {
  key: String
  connection: CollectionShopConnection
}

type CollectionShopConnectionImages {
  key: ID
  connection: CollectionShopConnection
}

type CollectionShopConnectionLink_text {
  key: String
  connection: CollectionShopConnection
}

type CollectionShopConnectionPosition {
  key: String
  connection: CollectionShopConnection
}

type CollectionShopConnectionPublished_at {
  key: DateTime
  connection: CollectionShopConnection
}

input CollectionShopInput {
  header: String
  title: String
  url: String
  images: ID
  Link_text: String
  position: ENUM_COLLECTIONSHOP_POSITION!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCollectionShopInput {
  header: String
  title: String
  url: String
  images: ID
  Link_text: String
  position: ENUM_COLLECTIONSHOP_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCollectionShopInput {
  data: CollectionShopInput
}

type createCollectionShopPayload {
  collectionShop: CollectionShop
}

input updateCollectionShopInput {
  where: InputID
  data: editCollectionShopInput
}

type updateCollectionShopPayload {
  collectionShop: CollectionShop
}

input deleteCollectionShopInput {
  where: InputID
}

type deleteCollectionShopPayload {
  collectionShop: CollectionShop
}

type ContactDetails {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  email: String
  phone_number: String
  published_at: DateTime
}

type ContactDetailsConnection {
  values: [ContactDetails]
  groupBy: ContactDetailsGroupBy
  aggregate: ContactDetailsAggregator
}

type ContactDetailsAggregator {
  count: Int
  totalCount: Int
}

type ContactDetailsGroupBy {
  id: [ContactDetailsConnectionId]
  created_at: [ContactDetailsConnectionCreated_at]
  updated_at: [ContactDetailsConnectionUpdated_at]
  email: [ContactDetailsConnectionEmail]
  phone_number: [ContactDetailsConnectionPhone_number]
  published_at: [ContactDetailsConnectionPublished_at]
}

type ContactDetailsConnectionId {
  key: ID
  connection: ContactDetailsConnection
}

type ContactDetailsConnectionCreated_at {
  key: DateTime
  connection: ContactDetailsConnection
}

type ContactDetailsConnectionUpdated_at {
  key: DateTime
  connection: ContactDetailsConnection
}

type ContactDetailsConnectionEmail {
  key: String
  connection: ContactDetailsConnection
}

type ContactDetailsConnectionPhone_number {
  key: String
  connection: ContactDetailsConnection
}

type ContactDetailsConnectionPublished_at {
  key: DateTime
  connection: ContactDetailsConnection
}

input ContactDetailInput {
  email: String
  phone_number: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContactDetailInput {
  email: String
  phone_number: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createContactDetailInput {
  data: ContactDetailInput
}

type createContactDetailPayload {
  contactDetail: ContactDetails
}

input updateContactDetailInput {
  where: InputID
  data: editContactDetailInput
}

type updateContactDetailPayload {
  contactDetail: ContactDetails
}

input deleteContactDetailInput {
  where: InputID
}

type deleteContactDetailPayload {
  contactDetail: ContactDetails
}

type ContactPageText {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  images: UploadFile
  contact_text: String
  text_1: String
  text_2: String
  text_3: String
  text_4: String
  text_5: String
  text_6: String
  top_of_form_header: String
  top_of_form_text: String
  published_at: DateTime
}

input ContactPageTextInput {
  images: ID
  contact_text: String
  text_1: String
  text_2: String
  text_3: String
  text_4: String
  text_5: String
  text_6: String
  top_of_form_header: String
  top_of_form_text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContactPageTextInput {
  images: ID
  contact_text: String
  text_1: String
  text_2: String
  text_3: String
  text_4: String
  text_5: String
  text_6: String
  top_of_form_header: String
  top_of_form_text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateContactPageTextInput {
  data: editContactPageTextInput
}

type updateContactPageTextPayload {
  contactPageText: ContactPageText
}

type deleteContactPageTextPayload {
  contactPageText: ContactPageText
}

type Contact {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  value: String
  published_at: DateTime
}

type ContactConnection {
  values: [Contact]
  groupBy: ContactGroupBy
  aggregate: ContactAggregator
}

type ContactAggregator {
  count: Int
  totalCount: Int
}

type ContactGroupBy {
  id: [ContactConnectionId]
  created_at: [ContactConnectionCreated_at]
  updated_at: [ContactConnectionUpdated_at]
  title: [ContactConnectionTitle]
  value: [ContactConnectionValue]
  published_at: [ContactConnectionPublished_at]
}

type ContactConnectionId {
  key: ID
  connection: ContactConnection
}

type ContactConnectionCreated_at {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionUpdated_at {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionTitle {
  key: String
  connection: ContactConnection
}

type ContactConnectionValue {
  key: String
  connection: ContactConnection
}

type ContactConnectionPublished_at {
  key: DateTime
  connection: ContactConnection
}

input ContactInput {
  title: String
  value: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContactInput {
  title: String
  value: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contact
}

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contact
}

type CountryData {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Data: JSON
  published_at: DateTime
}

input CountryDatumInput {
  Data: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCountryDatumInput {
  Data: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateCountryDatumInput {
  data: editCountryDatumInput
}

type updateCountryDatumPayload {
  countryDatum: CountryData
}

type deleteCountryDatumPayload {
  countryDatum: CountryData
}

type DeliveryAddress {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  first_name: String
  surname: String
  address_line: String
  road: String
  house_number: Float
  place: String
  country: String
  postcode: String
  users_permissions_user: UsersPermissionsUser
  published_at: DateTime
}

type DeliveryAddressConnection {
  values: [DeliveryAddress]
  groupBy: DeliveryAddressGroupBy
  aggregate: DeliveryAddressAggregator
}

type DeliveryAddressAggregator {
  count: Int
  totalCount: Int
  sum: DeliveryAddressAggregatorSum
  avg: DeliveryAddressAggregatorAvg
  min: DeliveryAddressAggregatorMin
  max: DeliveryAddressAggregatorMax
}

type DeliveryAddressAggregatorSum {
  house_number: Float
}

type DeliveryAddressAggregatorAvg {
  house_number: Float
}

type DeliveryAddressAggregatorMin {
  house_number: Float
}

type DeliveryAddressAggregatorMax {
  house_number: Float
}

type DeliveryAddressGroupBy {
  id: [DeliveryAddressConnectionId]
  created_at: [DeliveryAddressConnectionCreated_at]
  updated_at: [DeliveryAddressConnectionUpdated_at]
  first_name: [DeliveryAddressConnectionFirst_name]
  surname: [DeliveryAddressConnectionSurname]
  address_line: [DeliveryAddressConnectionAddress_line]
  road: [DeliveryAddressConnectionRoad]
  house_number: [DeliveryAddressConnectionHouse_number]
  place: [DeliveryAddressConnectionPlace]
  country: [DeliveryAddressConnectionCountry]
  postcode: [DeliveryAddressConnectionPostcode]
  users_permissions_user: [DeliveryAddressConnectionUsers_permissions_user]
  published_at: [DeliveryAddressConnectionPublished_at]
}

type DeliveryAddressConnectionId {
  key: ID
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionCreated_at {
  key: DateTime
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionUpdated_at {
  key: DateTime
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionFirst_name {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionSurname {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionAddress_line {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionRoad {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionHouse_number {
  key: Float
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionPlace {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionCountry {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionPostcode {
  key: String
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionUsers_permissions_user {
  key: ID
  connection: DeliveryAddressConnection
}

type DeliveryAddressConnectionPublished_at {
  key: DateTime
  connection: DeliveryAddressConnection
}

input DeliveryAddressInput {
  first_name: String
  surname: String
  address_line: String
  road: String
  house_number: Float
  place: String
  country: String
  postcode: String
  users_permissions_user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDeliveryAddressInput {
  first_name: String
  surname: String
  address_line: String
  road: String
  house_number: Float
  place: String
  country: String
  postcode: String
  users_permissions_user: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createDeliveryAddressInput {
  data: DeliveryAddressInput
}

type createDeliveryAddressPayload {
  deliveryAddress: DeliveryAddress
}

input updateDeliveryAddressInput {
  where: InputID
  data: editDeliveryAddressInput
}

type updateDeliveryAddressPayload {
  deliveryAddress: DeliveryAddress
}

input deleteDeliveryAddressInput {
  where: InputID
}

type deleteDeliveryAddressPayload {
  deliveryAddress: DeliveryAddress
}

type DirectionOfFragrance {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  published_at: DateTime
}

type DirectionOfFragranceConnection {
  values: [DirectionOfFragrance]
  groupBy: DirectionOfFragranceGroupBy
  aggregate: DirectionOfFragranceAggregator
}

type DirectionOfFragranceAggregator {
  count: Int
  totalCount: Int
}

type DirectionOfFragranceGroupBy {
  id: [DirectionOfFragranceConnectionId]
  created_at: [DirectionOfFragranceConnectionCreated_at]
  updated_at: [DirectionOfFragranceConnectionUpdated_at]
  name: [DirectionOfFragranceConnectionName]
  published_at: [DirectionOfFragranceConnectionPublished_at]
}

type DirectionOfFragranceConnectionId {
  key: ID
  connection: DirectionOfFragranceConnection
}

type DirectionOfFragranceConnectionCreated_at {
  key: DateTime
  connection: DirectionOfFragranceConnection
}

type DirectionOfFragranceConnectionUpdated_at {
  key: DateTime
  connection: DirectionOfFragranceConnection
}

type DirectionOfFragranceConnectionName {
  key: String
  connection: DirectionOfFragranceConnection
}

type DirectionOfFragranceConnectionPublished_at {
  key: DateTime
  connection: DirectionOfFragranceConnection
}

input DirectionOfFragranceInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDirectionOfFragranceInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createDirectionOfFragranceInput {
  data: DirectionOfFragranceInput
}

type createDirectionOfFragrancePayload {
  directionOfFragrance: DirectionOfFragrance
}

input updateDirectionOfFragranceInput {
  where: InputID
  data: editDirectionOfFragranceInput
}

type updateDirectionOfFragrancePayload {
  directionOfFragrance: DirectionOfFragrance
}

input deleteDirectionOfFragranceInput {
  where: InputID
}

type deleteDirectionOfFragrancePayload {
  directionOfFragrance: DirectionOfFragrance
}

enum ENUM_DISCOUNTCODES_TYPE_OF_DISCOUNT {
  prozentual
  absolut
  Stuck
  Versand
}

type DiscountCodes {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  Description: String
  status_voucher: Boolean
  unique_multiple: Boolean
  multiple_redemptions: Boolean
  one_redemption: Boolean
  redeem_until_usedup: JSON
  single_redemption: JSON
  Minimum_order_value: Long
  valid_from_date_time: DateTime
  Valid_to_date_time: DateTime
  code_character_length: Long
  amount_discount: Long
  type_of_discount: ENUM_DISCOUNTCODES_TYPE_OF_DISCOUNT
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type DiscountCodesConnection {
  values: [DiscountCodes]
  groupBy: DiscountCodesGroupBy
  aggregate: DiscountCodesAggregator
}

type DiscountCodesAggregator {
  count: Int
  totalCount: Int
}

type DiscountCodesGroupBy {
  id: [DiscountCodesConnectionId]
  created_at: [DiscountCodesConnectionCreated_at]
  updated_at: [DiscountCodesConnectionUpdated_at]
  Name: [DiscountCodesConnectionName]
  Description: [DiscountCodesConnectionDescription]
  status_voucher: [DiscountCodesConnectionStatus_voucher]
  unique_multiple: [DiscountCodesConnectionUnique_multiple]
  multiple_redemptions: [DiscountCodesConnectionMultiple_redemptions]
  one_redemption: [DiscountCodesConnectionOne_redemption]
  redeem_until_usedup: [DiscountCodesConnectionRedeem_until_usedup]
  single_redemption: [DiscountCodesConnectionSingle_redemption]
  Minimum_order_value: [DiscountCodesConnectionMinimum_order_value]
  valid_from_date_time: [DiscountCodesConnectionValid_from_date_time]
  Valid_to_date_time: [DiscountCodesConnectionValid_to_date_time]
  code_character_length: [DiscountCodesConnectionCode_character_length]
  amount_discount: [DiscountCodesConnectionAmount_discount]
  type_of_discount: [DiscountCodesConnectionType_of_discount]
  published_at: [DiscountCodesConnectionPublished_at]
}

type DiscountCodesConnectionId {
  key: ID
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionCreated_at {
  key: DateTime
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionUpdated_at {
  key: DateTime
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionName {
  key: String
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionDescription {
  key: String
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionStatus_voucher {
  key: Boolean
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionUnique_multiple {
  key: Boolean
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionMultiple_redemptions {
  key: Boolean
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionOne_redemption {
  key: Boolean
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionRedeem_until_usedup {
  key: JSON
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionSingle_redemption {
  key: JSON
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionMinimum_order_value {
  key: ID
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionValid_from_date_time {
  key: DateTime
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionValid_to_date_time {
  key: DateTime
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionCode_character_length {
  key: ID
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionAmount_discount {
  key: ID
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionType_of_discount {
  key: String
  connection: DiscountCodesConnection
}

type DiscountCodesConnectionPublished_at {
  key: DateTime
  connection: DiscountCodesConnection
}

input DiscountCodeInput {
  Name: String
  Description: String
  status_voucher: Boolean
  unique_multiple: Boolean
  multiple_redemptions: Boolean
  one_redemption: Boolean
  redeem_until_usedup: JSON
  single_redemption: JSON
  Minimum_order_value: Long
  valid_from_date_time: DateTime
  Valid_to_date_time: DateTime
  code_character_length: Long
  amount_discount: Long
  type_of_discount: ENUM_DISCOUNTCODES_TYPE_OF_DISCOUNT
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDiscountCodeInput {
  Name: String
  Description: String
  status_voucher: Boolean
  unique_multiple: Boolean
  multiple_redemptions: Boolean
  one_redemption: Boolean
  redeem_until_usedup: JSON
  single_redemption: JSON
  Minimum_order_value: Long
  valid_from_date_time: DateTime
  Valid_to_date_time: DateTime
  code_character_length: Long
  amount_discount: Long
  type_of_discount: ENUM_DISCOUNTCODES_TYPE_OF_DISCOUNT
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createDiscountCodeInput {
  data: DiscountCodeInput
}

type createDiscountCodePayload {
  discountCode: DiscountCodes
}

input updateDiscountCodeInput {
  where: InputID
  data: editDiscountCodeInput
}

type updateDiscountCodePayload {
  discountCode: DiscountCodes
}

input deleteDiscountCodeInput {
  where: InputID
}

type deleteDiscountCodePayload {
  discountCode: DiscountCodes
}

type Discount {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  discount: Float
  minprice: Float
  published_at: DateTime
}

input DiscountInput {
  discount: Float
  minprice: Float
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDiscountInput {
  discount: Float
  minprice: Float
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateDiscountInput {
  data: editDiscountInput
}

type updateDiscountPayload {
  discount: Discount
}

type deleteDiscountPayload {
  discount: Discount
}

type DpabStore {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  value_1: String
  value_2: String
  published_at: DateTime
}

type DpabStoreConnection {
  values: [DpabStore]
  groupBy: DpabStoreGroupBy
  aggregate: DpabStoreAggregator
}

type DpabStoreAggregator {
  count: Int
  totalCount: Int
}

type DpabStoreGroupBy {
  id: [DpabStoreConnectionId]
  created_at: [DpabStoreConnectionCreated_at]
  updated_at: [DpabStoreConnectionUpdated_at]
  title: [DpabStoreConnectionTitle]
  value_1: [DpabStoreConnectionValue_1]
  value_2: [DpabStoreConnectionValue_2]
  published_at: [DpabStoreConnectionPublished_at]
}

type DpabStoreConnectionId {
  key: ID
  connection: DpabStoreConnection
}

type DpabStoreConnectionCreated_at {
  key: DateTime
  connection: DpabStoreConnection
}

type DpabStoreConnectionUpdated_at {
  key: DateTime
  connection: DpabStoreConnection
}

type DpabStoreConnectionTitle {
  key: String
  connection: DpabStoreConnection
}

type DpabStoreConnectionValue_1 {
  key: String
  connection: DpabStoreConnection
}

type DpabStoreConnectionValue_2 {
  key: String
  connection: DpabStoreConnection
}

type DpabStoreConnectionPublished_at {
  key: DateTime
  connection: DpabStoreConnection
}

input DpabStoreInput {
  title: String
  value_1: String
  value_2: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDpabStoreInput {
  title: String
  value_1: String
  value_2: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createDpabStoreInput {
  data: DpabStoreInput
}

type createDpabStorePayload {
  dpabStore: DpabStore
}

input updateDpabStoreInput {
  where: InputID
  data: editDpabStoreInput
}

type updateDpabStorePayload {
  dpabStore: DpabStore
}

input deleteDpabStoreInput {
  where: InputID
}

type deleteDpabStorePayload {
  dpabStore: DpabStore
}

enum ENUM_EIGHTPRODUCTS_POSITION {
  HerrenPageOne
  HerrenPageTwo
}

type EightProducts {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  position: ENUM_EIGHTPRODUCTS_POSITION!
  published_at: DateTime
  beauties(sort: String, limit: Int, start: Int, where: JSON): [Beauty]
  interieurs(sort: String, limit: Int, start: Int, where: JSON): [Interieur]
  parfums(sort: String, limit: Int, start: Int, where: JSON): [Parfums]
}

type EightProductsConnection {
  values: [EightProducts]
  groupBy: EightProductsGroupBy
  aggregate: EightProductsAggregator
}

type EightProductsAggregator {
  count: Int
  totalCount: Int
}

type EightProductsGroupBy {
  id: [EightProductsConnectionId]
  created_at: [EightProductsConnectionCreated_at]
  updated_at: [EightProductsConnectionUpdated_at]
  position: [EightProductsConnectionPosition]
  published_at: [EightProductsConnectionPublished_at]
}

type EightProductsConnectionId {
  key: ID
  connection: EightProductsConnection
}

type EightProductsConnectionCreated_at {
  key: DateTime
  connection: EightProductsConnection
}

type EightProductsConnectionUpdated_at {
  key: DateTime
  connection: EightProductsConnection
}

type EightProductsConnectionPosition {
  key: String
  connection: EightProductsConnection
}

type EightProductsConnectionPublished_at {
  key: DateTime
  connection: EightProductsConnection
}

input EightProductInput {
  position: ENUM_EIGHTPRODUCTS_POSITION
  beauties: [ID]
  interieurs: [ID]
  parfums: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editEightProductInput {
  position: ENUM_EIGHTPRODUCTS_POSITION
  beauties: [ID]
  interieurs: [ID]
  parfums: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createEightProductInput {
  data: EightProductInput
}

type createEightProductPayload {
  eightProduct: EightProducts
}

input updateEightProductInput {
  where: InputID
  data: editEightProductInput
}

type updateEightProductPayload {
  eightProduct: EightProducts
}

input deleteEightProductInput {
  where: InputID
}

type deleteEightProductPayload {
  eightProduct: EightProducts
}

type FavoriteProduct {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  users_permissions_user: UsersPermissionsUser
  product: Products
  variants_of_a_product: VariantsOfAProduct
  published_at: DateTime
}

type FavoriteProductConnection {
  values: [FavoriteProduct]
  groupBy: FavoriteProductGroupBy
  aggregate: FavoriteProductAggregator
}

type FavoriteProductAggregator {
  count: Int
  totalCount: Int
}

type FavoriteProductGroupBy {
  id: [FavoriteProductConnectionId]
  created_at: [FavoriteProductConnectionCreated_at]
  updated_at: [FavoriteProductConnectionUpdated_at]
  users_permissions_user: [FavoriteProductConnectionUsers_permissions_user]
  product: [FavoriteProductConnectionProduct]
  variants_of_a_product: [FavoriteProductConnectionVariants_of_a_product]
  published_at: [FavoriteProductConnectionPublished_at]
}

type FavoriteProductConnectionId {
  key: ID
  connection: FavoriteProductConnection
}

type FavoriteProductConnectionCreated_at {
  key: DateTime
  connection: FavoriteProductConnection
}

type FavoriteProductConnectionUpdated_at {
  key: DateTime
  connection: FavoriteProductConnection
}

type FavoriteProductConnectionUsers_permissions_user {
  key: ID
  connection: FavoriteProductConnection
}

type FavoriteProductConnectionProduct {
  key: ID
  connection: FavoriteProductConnection
}

type FavoriteProductConnectionVariants_of_a_product {
  key: ID
  connection: FavoriteProductConnection
}

type FavoriteProductConnectionPublished_at {
  key: DateTime
  connection: FavoriteProductConnection
}

input FavoriteProductInput {
  users_permissions_user: ID
  product: ID
  variants_of_a_product: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFavoriteProductInput {
  users_permissions_user: ID
  product: ID
  variants_of_a_product: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createFavoriteProductInput {
  data: FavoriteProductInput
}

type createFavoriteProductPayload {
  favoriteProduct: FavoriteProduct
}

input updateFavoriteProductInput {
  where: InputID
  data: editFavoriteProductInput
}

type updateFavoriteProductPayload {
  favoriteProduct: FavoriteProduct
}

input deleteFavoriteProductInput {
  where: InputID
}

type deleteFavoriteProductPayload {
  favoriteProduct: FavoriteProduct
}

type FourIcons {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  text: String
  published_at: DateTime
}

type FourIconsConnection {
  values: [FourIcons]
  groupBy: FourIconsGroupBy
  aggregate: FourIconsAggregator
}

type FourIconsAggregator {
  count: Int
  totalCount: Int
}

type FourIconsGroupBy {
  id: [FourIconsConnectionId]
  created_at: [FourIconsConnectionCreated_at]
  updated_at: [FourIconsConnectionUpdated_at]
  header: [FourIconsConnectionHeader]
  text: [FourIconsConnectionText]
  published_at: [FourIconsConnectionPublished_at]
}

type FourIconsConnectionId {
  key: ID
  connection: FourIconsConnection
}

type FourIconsConnectionCreated_at {
  key: DateTime
  connection: FourIconsConnection
}

type FourIconsConnectionUpdated_at {
  key: DateTime
  connection: FourIconsConnection
}

type FourIconsConnectionHeader {
  key: String
  connection: FourIconsConnection
}

type FourIconsConnectionText {
  key: String
  connection: FourIconsConnection
}

type FourIconsConnectionPublished_at {
  key: DateTime
  connection: FourIconsConnection
}

input FourIconInput {
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFourIconInput {
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createFourIconInput {
  data: FourIconInput
}

type createFourIconPayload {
  fourIcon: FourIcons
}

input updateFourIconInput {
  where: InputID
  data: editFourIconInput
}

type updateFourIconPayload {
  fourIcon: FourIcons
}

input deleteFourIconInput {
  where: InputID
}

type deleteFourIconPayload {
  fourIcon: FourIcons
}

enum ENUM_FOURPRODUCTS_POSITION {
  HomePage
  ProductPage
  NotFoundPage
}

type FourProducts {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  position: ENUM_FOURPRODUCTS_POSITION!
  published_at: DateTime
  parfums(sort: String, limit: Int, start: Int, where: JSON): [Parfums]
  beauties(sort: String, limit: Int, start: Int, where: JSON): [Beauty]
  interieurs(sort: String, limit: Int, start: Int, where: JSON): [Interieur]
}

type FourProductsConnection {
  values: [FourProducts]
  groupBy: FourProductsGroupBy
  aggregate: FourProductsAggregator
}

type FourProductsAggregator {
  count: Int
  totalCount: Int
}

type FourProductsGroupBy {
  id: [FourProductsConnectionId]
  created_at: [FourProductsConnectionCreated_at]
  updated_at: [FourProductsConnectionUpdated_at]
  position: [FourProductsConnectionPosition]
  published_at: [FourProductsConnectionPublished_at]
}

type FourProductsConnectionId {
  key: ID
  connection: FourProductsConnection
}

type FourProductsConnectionCreated_at {
  key: DateTime
  connection: FourProductsConnection
}

type FourProductsConnectionUpdated_at {
  key: DateTime
  connection: FourProductsConnection
}

type FourProductsConnectionPosition {
  key: String
  connection: FourProductsConnection
}

type FourProductsConnectionPublished_at {
  key: DateTime
  connection: FourProductsConnection
}

input FourProductInput {
  position: ENUM_FOURPRODUCTS_POSITION
  parfums: [ID]
  beauties: [ID]
  interieurs: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFourProductInput {
  position: ENUM_FOURPRODUCTS_POSITION
  parfums: [ID]
  beauties: [ID]
  interieurs: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createFourProductInput {
  data: FourProductInput
}

type createFourProductPayload {
  fourProduct: FourProducts
}

input updateFourProductInput {
  where: InputID
  data: editFourProductInput
}

type updateFourProductPayload {
  fourProduct: FourProducts
}

input deleteFourProductInput {
  where: InputID
}

type deleteFourProductPayload {
  fourProduct: FourProducts
}

type FragranceOccasion {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  published_at: DateTime
}

type FragranceOccasionConnection {
  values: [FragranceOccasion]
  groupBy: FragranceOccasionGroupBy
  aggregate: FragranceOccasionAggregator
}

type FragranceOccasionAggregator {
  count: Int
  totalCount: Int
}

type FragranceOccasionGroupBy {
  id: [FragranceOccasionConnectionId]
  created_at: [FragranceOccasionConnectionCreated_at]
  updated_at: [FragranceOccasionConnectionUpdated_at]
  name: [FragranceOccasionConnectionName]
  published_at: [FragranceOccasionConnectionPublished_at]
}

type FragranceOccasionConnectionId {
  key: ID
  connection: FragranceOccasionConnection
}

type FragranceOccasionConnectionCreated_at {
  key: DateTime
  connection: FragranceOccasionConnection
}

type FragranceOccasionConnectionUpdated_at {
  key: DateTime
  connection: FragranceOccasionConnection
}

type FragranceOccasionConnectionName {
  key: String
  connection: FragranceOccasionConnection
}

type FragranceOccasionConnectionPublished_at {
  key: DateTime
  connection: FragranceOccasionConnection
}

input FragranceOccasionInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFragranceOccasionInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createFragranceOccasionInput {
  data: FragranceOccasionInput
}

type createFragranceOccasionPayload {
  fragranceOccasion: FragranceOccasion
}

input updateFragranceOccasionInput {
  where: InputID
  data: editFragranceOccasionInput
}

type updateFragranceOccasionPayload {
  fragranceOccasion: FragranceOccasion
}

input deleteFragranceOccasionInput {
  where: InputID
}

type deleteFragranceOccasionPayload {
  fragranceOccasion: FragranceOccasion
}

enum ENUM_GIFTWRAP_SECURE {
  One
}

type GiftWrap {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  price: Long
  Name: String
  Text: String
  secure: ENUM_GIFTWRAP_SECURE!
  published_at: DateTime
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type GiftWrapConnection {
  values: [GiftWrap]
  groupBy: GiftWrapGroupBy
  aggregate: GiftWrapAggregator
}

type GiftWrapAggregator {
  count: Int
  totalCount: Int
}

type GiftWrapGroupBy {
  id: [GiftWrapConnectionId]
  created_at: [GiftWrapConnectionCreated_at]
  updated_at: [GiftWrapConnectionUpdated_at]
  price: [GiftWrapConnectionPrice]
  Name: [GiftWrapConnectionName]
  Text: [GiftWrapConnectionText]
  secure: [GiftWrapConnectionSecure]
  published_at: [GiftWrapConnectionPublished_at]
}

type GiftWrapConnectionId {
  key: ID
  connection: GiftWrapConnection
}

type GiftWrapConnectionCreated_at {
  key: DateTime
  connection: GiftWrapConnection
}

type GiftWrapConnectionUpdated_at {
  key: DateTime
  connection: GiftWrapConnection
}

type GiftWrapConnectionPrice {
  key: ID
  connection: GiftWrapConnection
}

type GiftWrapConnectionName {
  key: String
  connection: GiftWrapConnection
}

type GiftWrapConnectionText {
  key: String
  connection: GiftWrapConnection
}

type GiftWrapConnectionSecure {
  key: String
  connection: GiftWrapConnection
}

type GiftWrapConnectionPublished_at {
  key: DateTime
  connection: GiftWrapConnection
}

input GiftWrapInput {
  images: [ID]
  price: Long
  Name: String
  Text: String
  secure: ENUM_GIFTWRAP_SECURE
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editGiftWrapInput {
  images: [ID]
  price: Long
  Name: String
  Text: String
  secure: ENUM_GIFTWRAP_SECURE
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createGiftWrapInput {
  data: GiftWrapInput
}

type createGiftWrapPayload {
  giftWrap: GiftWrap
}

input updateGiftWrapInput {
  where: InputID
  data: editGiftWrapInput
}

type updateGiftWrapPayload {
  giftWrap: GiftWrap
}

input deleteGiftWrapInput {
  where: InputID
}

type deleteGiftWrapPayload {
  giftWrap: GiftWrap
}

type HomePagePopupContent {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subtitle: String
  images: UploadFile
  privacy: String
  text_1: String
  text_2: String
  published_at: DateTime
}

input HomePagePopupContentInput {
  title: String
  subtitle: String
  images: ID
  privacy: String
  text_1: String
  text_2: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editHomePagePopupContentInput {
  title: String
  subtitle: String
  images: ID
  privacy: String
  text_1: String
  text_2: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateHomePagePopupContentInput {
  data: editHomePagePopupContentInput
}

type updateHomePagePopupContentPayload {
  homePagePopupContent: HomePagePopupContent
}

type deleteHomePagePopupContentPayload {
  homePagePopupContent: HomePagePopupContent
}

enum ENUM_INSPIRATION_POSITION {
  HomePageOne
  HomePageTwo
  HomePageThre
  HerrenPageOne
  HerrenPageTwo
  HerrenPageThre
}

type Inspiration {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  title: String
  text: String
  button_text: String
  url: String
  images: UploadFile
  image_header: String
  image_title: String
  position: ENUM_INSPIRATION_POSITION!
  published_at: DateTime
}

type InspirationConnection {
  values: [Inspiration]
  groupBy: InspirationGroupBy
  aggregate: InspirationAggregator
}

type InspirationAggregator {
  count: Int
  totalCount: Int
}

type InspirationGroupBy {
  id: [InspirationConnectionId]
  created_at: [InspirationConnectionCreated_at]
  updated_at: [InspirationConnectionUpdated_at]
  header: [InspirationConnectionHeader]
  title: [InspirationConnectionTitle]
  text: [InspirationConnectionText]
  button_text: [InspirationConnectionButton_text]
  url: [InspirationConnectionUrl]
  images: [InspirationConnectionImages]
  image_header: [InspirationConnectionImage_header]
  image_title: [InspirationConnectionImage_title]
  position: [InspirationConnectionPosition]
  published_at: [InspirationConnectionPublished_at]
}

type InspirationConnectionId {
  key: ID
  connection: InspirationConnection
}

type InspirationConnectionCreated_at {
  key: DateTime
  connection: InspirationConnection
}

type InspirationConnectionUpdated_at {
  key: DateTime
  connection: InspirationConnection
}

type InspirationConnectionHeader {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionTitle {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionText {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionButton_text {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionUrl {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionImages {
  key: ID
  connection: InspirationConnection
}

type InspirationConnectionImage_header {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionImage_title {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionPosition {
  key: String
  connection: InspirationConnection
}

type InspirationConnectionPublished_at {
  key: DateTime
  connection: InspirationConnection
}

input InspirationInput {
  header: String
  title: String
  text: String
  button_text: String
  url: String
  images: ID
  image_header: String
  image_title: String
  position: ENUM_INSPIRATION_POSITION!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editInspirationInput {
  header: String
  title: String
  text: String
  button_text: String
  url: String
  images: ID
  image_header: String
  image_title: String
  position: ENUM_INSPIRATION_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createInspirationInput {
  data: InspirationInput
}

type createInspirationPayload {
  inspiration: Inspiration
}

input updateInspirationInput {
  where: InputID
  data: editInspirationInput
}

type updateInspirationPayload {
  inspiration: Inspiration
}

input deleteInspirationInput {
  where: InputID
}

type deleteInspirationPayload {
  inspiration: Inspiration
}

type Interieur {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  productId: Long
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type InterieurConnection {
  values: [Interieur]
  groupBy: InterieurGroupBy
  aggregate: InterieurAggregator
}

type InterieurAggregator {
  count: Int
  totalCount: Int
}

type InterieurGroupBy {
  id: [InterieurConnectionId]
  created_at: [InterieurConnectionCreated_at]
  updated_at: [InterieurConnectionUpdated_at]
  productId: [InterieurConnectionProductId]
  published_at: [InterieurConnectionPublished_at]
}

type InterieurConnectionId {
  key: ID
  connection: InterieurConnection
}

type InterieurConnectionCreated_at {
  key: DateTime
  connection: InterieurConnection
}

type InterieurConnectionUpdated_at {
  key: DateTime
  connection: InterieurConnection
}

type InterieurConnectionProductId {
  key: ID
  connection: InterieurConnection
}

type InterieurConnectionPublished_at {
  key: DateTime
  connection: InterieurConnection
}

input InterieurInput {
  productId: Long
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editInterieurInput {
  productId: Long
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createInterieurInput {
  data: InterieurInput
}

type createInterieurPayload {
  interieur: Interieur
}

input updateInterieurInput {
  where: InputID
  data: editInterieurInput
}

type updateInterieurPayload {
  interieur: Interieur
}

input deleteInterieurInput {
  where: InputID
}

type deleteInterieurPayload {
  interieur: Interieur
}

enum ENUM_MAGAZINPRESENTATION_POSITION {
  right
  left
  center
  full
}

type MagazinPresentation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  images_1: UploadFile
  text_1: String
  text_2: String
  images_2: UploadFile
  position: ENUM_MAGAZINPRESENTATION_POSITION
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type MagazinPresentationConnection {
  values: [MagazinPresentation]
  groupBy: MagazinPresentationGroupBy
  aggregate: MagazinPresentationAggregator
}

type MagazinPresentationAggregator {
  count: Int
  totalCount: Int
}

type MagazinPresentationGroupBy {
  id: [MagazinPresentationConnectionId]
  created_at: [MagazinPresentationConnectionCreated_at]
  updated_at: [MagazinPresentationConnectionUpdated_at]
  images_1: [MagazinPresentationConnectionImages_1]
  text_1: [MagazinPresentationConnectionText_1]
  text_2: [MagazinPresentationConnectionText_2]
  images_2: [MagazinPresentationConnectionImages_2]
  position: [MagazinPresentationConnectionPosition]
  published_at: [MagazinPresentationConnectionPublished_at]
}

type MagazinPresentationConnectionId {
  key: ID
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionCreated_at {
  key: DateTime
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionUpdated_at {
  key: DateTime
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionImages_1 {
  key: ID
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionText_1 {
  key: String
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionText_2 {
  key: String
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionImages_2 {
  key: ID
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionPosition {
  key: String
  connection: MagazinPresentationConnection
}

type MagazinPresentationConnectionPublished_at {
  key: DateTime
  connection: MagazinPresentationConnection
}

input MagazinPresentationInput {
  images_1: ID
  text_1: String
  text_2: String
  images_2: ID
  position: ENUM_MAGAZINPRESENTATION_POSITION
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMagazinPresentationInput {
  images_1: ID
  text_1: String
  text_2: String
  images_2: ID
  position: ENUM_MAGAZINPRESENTATION_POSITION
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMagazinPresentationInput {
  data: MagazinPresentationInput
}

type createMagazinPresentationPayload {
  magazinPresentation: MagazinPresentation
}

input updateMagazinPresentationInput {
  where: InputID
  data: editMagazinPresentationInput
}

type updateMagazinPresentationPayload {
  magazinPresentation: MagazinPresentation
}

input deleteMagazinPresentationInput {
  where: InputID
}

type deleteMagazinPresentationPayload {
  magazinPresentation: MagazinPresentation
}

type MainAccount {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  text: String
  published_at: DateTime
}

type MainAccountConnection {
  values: [MainAccount]
  groupBy: MainAccountGroupBy
  aggregate: MainAccountAggregator
}

type MainAccountAggregator {
  count: Int
  totalCount: Int
}

type MainAccountGroupBy {
  id: [MainAccountConnectionId]
  created_at: [MainAccountConnectionCreated_at]
  updated_at: [MainAccountConnectionUpdated_at]
  title: [MainAccountConnectionTitle]
  text: [MainAccountConnectionText]
  published_at: [MainAccountConnectionPublished_at]
}

type MainAccountConnectionId {
  key: ID
  connection: MainAccountConnection
}

type MainAccountConnectionCreated_at {
  key: DateTime
  connection: MainAccountConnection
}

type MainAccountConnectionUpdated_at {
  key: DateTime
  connection: MainAccountConnection
}

type MainAccountConnectionTitle {
  key: String
  connection: MainAccountConnection
}

type MainAccountConnectionText {
  key: String
  connection: MainAccountConnection
}

type MainAccountConnectionPublished_at {
  key: DateTime
  connection: MainAccountConnection
}

input MainAccountInput {
  title: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMainAccountInput {
  title: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMainAccountInput {
  data: MainAccountInput
}

type createMainAccountPayload {
  mainAccount: MainAccount
}

input updateMainAccountInput {
  where: InputID
  data: editMainAccountInput
}

type updateMainAccountPayload {
  mainAccount: MainAccount
}

input deleteMainAccountInput {
  where: InputID
}

type deleteMainAccountPayload {
  mainAccount: MainAccount
}

type MeinKonto {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  url: String
  published_at: DateTime
}

type MeinKontoConnection {
  values: [MeinKonto]
  groupBy: MeinKontoGroupBy
  aggregate: MeinKontoAggregator
}

type MeinKontoAggregator {
  count: Int
  totalCount: Int
}

type MeinKontoGroupBy {
  id: [MeinKontoConnectionId]
  created_at: [MeinKontoConnectionCreated_at]
  updated_at: [MeinKontoConnectionUpdated_at]
  title: [MeinKontoConnectionTitle]
  url: [MeinKontoConnectionUrl]
  published_at: [MeinKontoConnectionPublished_at]
}

type MeinKontoConnectionId {
  key: ID
  connection: MeinKontoConnection
}

type MeinKontoConnectionCreated_at {
  key: DateTime
  connection: MeinKontoConnection
}

type MeinKontoConnectionUpdated_at {
  key: DateTime
  connection: MeinKontoConnection
}

type MeinKontoConnectionTitle {
  key: String
  connection: MeinKontoConnection
}

type MeinKontoConnectionUrl {
  key: String
  connection: MeinKontoConnection
}

type MeinKontoConnectionPublished_at {
  key: DateTime
  connection: MeinKontoConnection
}

input MeinKontoInput {
  title: String
  url: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMeinKontoInput {
  title: String
  url: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMeinKontoInput {
  data: MeinKontoInput
}

type createMeinKontoPayload {
  meinKonto: MeinKonto
}

input updateMeinKontoInput {
  where: InputID
  data: editMeinKontoInput
}

type updateMeinKontoPayload {
  meinKonto: MeinKonto
}

input deleteMeinKontoInput {
  where: InputID
}

type deleteMeinKontoPayload {
  meinKonto: MeinKonto
}

enum ENUM_MENUITEM_POSITION {
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
  L
  M
  N
  O
  P
  Q
}

type MenuItem {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  item_name: String
  title: String
  images: UploadFile
  url: String
  position: ENUM_MENUITEM_POSITION!
  published_at: DateTime
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type MenuItemConnection {
  values: [MenuItem]
  groupBy: MenuItemGroupBy
  aggregate: MenuItemAggregator
}

type MenuItemAggregator {
  count: Int
  totalCount: Int
}

type MenuItemGroupBy {
  id: [MenuItemConnectionId]
  created_at: [MenuItemConnectionCreated_at]
  updated_at: [MenuItemConnectionUpdated_at]
  item_name: [MenuItemConnectionItem_name]
  title: [MenuItemConnectionTitle]
  images: [MenuItemConnectionImages]
  url: [MenuItemConnectionUrl]
  position: [MenuItemConnectionPosition]
  published_at: [MenuItemConnectionPublished_at]
}

type MenuItemConnectionId {
  key: ID
  connection: MenuItemConnection
}

type MenuItemConnectionCreated_at {
  key: DateTime
  connection: MenuItemConnection
}

type MenuItemConnectionUpdated_at {
  key: DateTime
  connection: MenuItemConnection
}

type MenuItemConnectionItem_name {
  key: String
  connection: MenuItemConnection
}

type MenuItemConnectionTitle {
  key: String
  connection: MenuItemConnection
}

type MenuItemConnectionImages {
  key: ID
  connection: MenuItemConnection
}

type MenuItemConnectionUrl {
  key: String
  connection: MenuItemConnection
}

type MenuItemConnectionPosition {
  key: String
  connection: MenuItemConnection
}

type MenuItemConnectionPublished_at {
  key: DateTime
  connection: MenuItemConnection
}

input MenuItemInput {
  item_name: String
  categories: [ID]
  title: String
  images: ID
  url: String
  position: ENUM_MENUITEM_POSITION
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMenuItemInput {
  item_name: String
  categories: [ID]
  title: String
  images: ID
  url: String
  position: ENUM_MENUITEM_POSITION
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMenuItemInput {
  data: MenuItemInput
}

type createMenuItemPayload {
  menuItem: MenuItem
}

input updateMenuItemInput {
  where: InputID
  data: editMenuItemInput
}

type updateMenuItemPayload {
  menuItem: MenuItem
}

input deleteMenuItemInput {
  where: InputID
}

type deleteMenuItemPayload {
  menuItem: MenuItem
}

type MidFooter {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  images: UploadFile
  text_1: String
  text_2: String
  text_3: String
  published_at: DateTime
}

type MidFooterConnection {
  values: [MidFooter]
  groupBy: MidFooterGroupBy
  aggregate: MidFooterAggregator
}

type MidFooterAggregator {
  count: Int
  totalCount: Int
}

type MidFooterGroupBy {
  id: [MidFooterConnectionId]
  created_at: [MidFooterConnectionCreated_at]
  updated_at: [MidFooterConnectionUpdated_at]
  header: [MidFooterConnectionHeader]
  images: [MidFooterConnectionImages]
  text_1: [MidFooterConnectionText_1]
  text_2: [MidFooterConnectionText_2]
  text_3: [MidFooterConnectionText_3]
  published_at: [MidFooterConnectionPublished_at]
}

type MidFooterConnectionId {
  key: ID
  connection: MidFooterConnection
}

type MidFooterConnectionCreated_at {
  key: DateTime
  connection: MidFooterConnection
}

type MidFooterConnectionUpdated_at {
  key: DateTime
  connection: MidFooterConnection
}

type MidFooterConnectionHeader {
  key: String
  connection: MidFooterConnection
}

type MidFooterConnectionImages {
  key: ID
  connection: MidFooterConnection
}

type MidFooterConnectionText_1 {
  key: String
  connection: MidFooterConnection
}

type MidFooterConnectionText_2 {
  key: String
  connection: MidFooterConnection
}

type MidFooterConnectionText_3 {
  key: String
  connection: MidFooterConnection
}

type MidFooterConnectionPublished_at {
  key: DateTime
  connection: MidFooterConnection
}

input MidFooterInput {
  header: String
  images: ID
  text_1: String
  text_2: String
  text_3: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMidFooterInput {
  header: String
  images: ID
  text_1: String
  text_2: String
  text_3: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createMidFooterInput {
  data: MidFooterInput
}

type createMidFooterPayload {
  midFooter: MidFooter
}

input updateMidFooterInput {
  where: InputID
  data: editMidFooterInput
}

type updateMidFooterPayload {
  midFooter: MidFooter
}

input deleteMidFooterInput {
  where: InputID
}

type deleteMidFooterPayload {
  midFooter: MidFooter
}

type NewProductLimit {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  new_product_limit: Long
  published_at: DateTime
}

input NewProductLimitInput {
  new_product_limit: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNewProductLimitInput {
  new_product_limit: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateNewProductLimitInput {
  data: editNewProductLimitInput
}

type updateNewProductLimitPayload {
  newProductLimit: NewProductLimit
}

type deleteNewProductLimitPayload {
  newProductLimit: NewProductLimit
}

enum ENUM_NEWSREPORT_POSITION {
  HomePageOne
  HomePageTwo
  HomePageThree
  HomePageFive
  HomePageFour
  HerrenPageOne
  HerrenPageTwo
  ShopPageOne
  ShopPageTwo
  ShopPageThree
  MagazinPageOne
  MagazinPageTwo
}

type NewsReport {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  title: String
  text: String
  url: String
  link_text: String
  images: UploadFile
  position: ENUM_NEWSREPORT_POSITION!
  published_at: DateTime
}

type NewsReportConnection {
  values: [NewsReport]
  groupBy: NewsReportGroupBy
  aggregate: NewsReportAggregator
}

type NewsReportAggregator {
  count: Int
  totalCount: Int
}

type NewsReportGroupBy {
  id: [NewsReportConnectionId]
  created_at: [NewsReportConnectionCreated_at]
  updated_at: [NewsReportConnectionUpdated_at]
  header: [NewsReportConnectionHeader]
  title: [NewsReportConnectionTitle]
  text: [NewsReportConnectionText]
  url: [NewsReportConnectionUrl]
  link_text: [NewsReportConnectionLink_text]
  images: [NewsReportConnectionImages]
  position: [NewsReportConnectionPosition]
  published_at: [NewsReportConnectionPublished_at]
}

type NewsReportConnectionId {
  key: ID
  connection: NewsReportConnection
}

type NewsReportConnectionCreated_at {
  key: DateTime
  connection: NewsReportConnection
}

type NewsReportConnectionUpdated_at {
  key: DateTime
  connection: NewsReportConnection
}

type NewsReportConnectionHeader {
  key: String
  connection: NewsReportConnection
}

type NewsReportConnectionTitle {
  key: String
  connection: NewsReportConnection
}

type NewsReportConnectionText {
  key: String
  connection: NewsReportConnection
}

type NewsReportConnectionUrl {
  key: String
  connection: NewsReportConnection
}

type NewsReportConnectionLink_text {
  key: String
  connection: NewsReportConnection
}

type NewsReportConnectionImages {
  key: ID
  connection: NewsReportConnection
}

type NewsReportConnectionPosition {
  key: String
  connection: NewsReportConnection
}

type NewsReportConnectionPublished_at {
  key: DateTime
  connection: NewsReportConnection
}

input NewsReportInput {
  header: String
  title: String
  text: String
  url: String
  link_text: String
  images: ID
  position: ENUM_NEWSREPORT_POSITION!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNewsReportInput {
  header: String
  title: String
  text: String
  url: String
  link_text: String
  images: ID
  position: ENUM_NEWSREPORT_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNewsReportInput {
  data: NewsReportInput
}

type createNewsReportPayload {
  newsReport: NewsReport
}

input updateNewsReportInput {
  where: InputID
  data: editNewsReportInput
}

type updateNewsReportPayload {
  newsReport: NewsReport
}

input deleteNewsReportInput {
  where: InputID
}

type deleteNewsReportPayload {
  newsReport: NewsReport
}

type NewsletterText {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text: String
  published_at: DateTime
}

type NewsletterTextConnection {
  values: [NewsletterText]
  groupBy: NewsletterTextGroupBy
  aggregate: NewsletterTextAggregator
}

type NewsletterTextAggregator {
  count: Int
  totalCount: Int
}

type NewsletterTextGroupBy {
  id: [NewsletterTextConnectionId]
  created_at: [NewsletterTextConnectionCreated_at]
  updated_at: [NewsletterTextConnectionUpdated_at]
  text: [NewsletterTextConnectionText]
  published_at: [NewsletterTextConnectionPublished_at]
}

type NewsletterTextConnectionId {
  key: ID
  connection: NewsletterTextConnection
}

type NewsletterTextConnectionCreated_at {
  key: DateTime
  connection: NewsletterTextConnection
}

type NewsletterTextConnectionUpdated_at {
  key: DateTime
  connection: NewsletterTextConnection
}

type NewsletterTextConnectionText {
  key: String
  connection: NewsletterTextConnection
}

type NewsletterTextConnectionPublished_at {
  key: DateTime
  connection: NewsletterTextConnection
}

input NewsletterTextInput {
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNewsletterTextInput {
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNewsletterTextInput {
  data: NewsletterTextInput
}

type createNewsletterTextPayload {
  newsletterText: NewsletterText
}

input updateNewsletterTextInput {
  where: InputID
  data: editNewsletterTextInput
}

type updateNewsletterTextPayload {
  newsletterText: NewsletterText
}

input deleteNewsletterTextInput {
  where: InputID
}

type deleteNewsletterTextPayload {
  newsletterText: NewsletterText
}

type Newsletter {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Subject: String
  HTML_describe: String
  published_at: DateTime
}

type NewsletterConnection {
  values: [Newsletter]
  groupBy: NewsletterGroupBy
  aggregate: NewsletterAggregator
}

type NewsletterAggregator {
  count: Int
  totalCount: Int
}

type NewsletterGroupBy {
  id: [NewsletterConnectionId]
  created_at: [NewsletterConnectionCreated_at]
  updated_at: [NewsletterConnectionUpdated_at]
  Subject: [NewsletterConnectionSubject]
  HTML_describe: [NewsletterConnectionHTML_describe]
  published_at: [NewsletterConnectionPublished_at]
}

type NewsletterConnectionId {
  key: ID
  connection: NewsletterConnection
}

type NewsletterConnectionCreated_at {
  key: DateTime
  connection: NewsletterConnection
}

type NewsletterConnectionUpdated_at {
  key: DateTime
  connection: NewsletterConnection
}

type NewsletterConnectionSubject {
  key: String
  connection: NewsletterConnection
}

type NewsletterConnectionHTML_describe {
  key: String
  connection: NewsletterConnection
}

type NewsletterConnectionPublished_at {
  key: DateTime
  connection: NewsletterConnection
}

input NewsletterInput {
  Subject: String
  HTML_describe: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNewsletterInput {
  Subject: String
  HTML_describe: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNewsletterInput {
  data: NewsletterInput
}

type createNewsletterPayload {
  newsletter: Newsletter
}

input updateNewsletterInput {
  where: InputID
  data: editNewsletterInput
}

type updateNewsletterPayload {
  newsletter: Newsletter
}

input deleteNewsletterInput {
  where: InputID
}

type deleteNewsletterPayload {
  newsletter: Newsletter
}

type NotFoundPageSection1 {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  images: UploadFile
  published_at: DateTime
}

input NotFoundPageSection1Input {
  title: String
  description: String
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNotFoundPageSection1Input {
  title: String
  description: String
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateNotFoundPageSection1Input {
  data: editNotFoundPageSection1Input
}

type updateNotFoundPageSection1Payload {
  notFoundPageSection1: NotFoundPageSection1
}

type deleteNotFoundPageSection1Payload {
  notFoundPageSection1: NotFoundPageSection1
}

type NotFoundPageSection2 {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subtitle: String
  published_at: DateTime
}

input NotFoundPageSection2Input {
  title: String
  subtitle: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNotFoundPageSection2Input {
  title: String
  subtitle: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateNotFoundPageSection2Input {
  data: editNotFoundPageSection2Input
}

type updateNotFoundPageSection2Payload {
  notFoundPageSection2: NotFoundPageSection2
}

type deleteNotFoundPageSection2Payload {
  notFoundPageSection2: NotFoundPageSection2
}

type NotFoundPageSection3 {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  image: UploadFile
  link: String
  published_at: DateTime
}

type NotFoundPageSection3Connection {
  values: [NotFoundPageSection3]
  groupBy: NotFoundPageSection3GroupBy
  aggregate: NotFoundPageSection3Aggregator
}

type NotFoundPageSection3Aggregator {
  count: Int
  totalCount: Int
}

type NotFoundPageSection3GroupBy {
  id: [NotFoundPageSection3ConnectionId]
  created_at: [NotFoundPageSection3ConnectionCreated_at]
  updated_at: [NotFoundPageSection3ConnectionUpdated_at]
  title: [NotFoundPageSection3ConnectionTitle]
  description: [NotFoundPageSection3ConnectionDescription]
  image: [NotFoundPageSection3ConnectionImage]
  link: [NotFoundPageSection3ConnectionLink]
  published_at: [NotFoundPageSection3ConnectionPublished_at]
}

type NotFoundPageSection3ConnectionId {
  key: ID
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionCreated_at {
  key: DateTime
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionUpdated_at {
  key: DateTime
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionTitle {
  key: String
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionDescription {
  key: String
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionImage {
  key: ID
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionLink {
  key: String
  connection: NotFoundPageSection3Connection
}

type NotFoundPageSection3ConnectionPublished_at {
  key: DateTime
  connection: NotFoundPageSection3Connection
}

input NotFoundPageSection3Input {
  title: String
  description: String
  image: ID
  link: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNotFoundPageSection3Input {
  title: String
  description: String
  image: ID
  link: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNotFoundPageSection3Input {
  data: NotFoundPageSection3Input
}

type createNotFoundPageSection3Payload {
  notFoundPageSection3: NotFoundPageSection3
}

input updateNotFoundPageSection3Input {
  where: InputID
  data: editNotFoundPageSection3Input
}

type updateNotFoundPageSection3Payload {
  notFoundPageSection3: NotFoundPageSection3
}

input deleteNotFoundPageSection3Input {
  where: InputID
}

type deleteNotFoundPageSection3Payload {
  notFoundPageSection3: NotFoundPageSection3
}

type OurBankConnection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  text: String
  published_at: DateTime
}

type OurBankConnectionConnection {
  values: [OurBankConnection]
  groupBy: OurBankConnectionGroupBy
  aggregate: OurBankConnectionAggregator
}

type OurBankConnectionAggregator {
  count: Int
  totalCount: Int
}

type OurBankConnectionGroupBy {
  id: [OurBankConnectionConnectionId]
  created_at: [OurBankConnectionConnectionCreated_at]
  updated_at: [OurBankConnectionConnectionUpdated_at]
  header: [OurBankConnectionConnectionHeader]
  text: [OurBankConnectionConnectionText]
  published_at: [OurBankConnectionConnectionPublished_at]
}

type OurBankConnectionConnectionId {
  key: ID
  connection: OurBankConnectionConnection
}

type OurBankConnectionConnectionCreated_at {
  key: DateTime
  connection: OurBankConnectionConnection
}

type OurBankConnectionConnectionUpdated_at {
  key: DateTime
  connection: OurBankConnectionConnection
}

type OurBankConnectionConnectionHeader {
  key: String
  connection: OurBankConnectionConnection
}

type OurBankConnectionConnectionText {
  key: String
  connection: OurBankConnectionConnection
}

type OurBankConnectionConnectionPublished_at {
  key: DateTime
  connection: OurBankConnectionConnection
}

input OurBankConnectionInput {
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOurBankConnectionInput {
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createOurBankConnectionInput {
  data: OurBankConnectionInput
}

type createOurBankConnectionPayload {
  ourBankConnection: OurBankConnection
}

input updateOurBankConnectionInput {
  where: InputID
  data: editOurBankConnectionInput
}

type updateOurBankConnectionPayload {
  ourBankConnection: OurBankConnection
}

input deleteOurBankConnectionInput {
  where: InputID
}

type deleteOurBankConnectionPayload {
  ourBankConnection: OurBankConnection
}

enum ENUM_PAGEHEADER_POSITION {
  grey
  black
}

type PageHeader {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  describe_HTML_CSS: String
  position: ENUM_PAGEHEADER_POSITION
  published_at: DateTime
}

type PageHeaderConnection {
  values: [PageHeader]
  groupBy: PageHeaderGroupBy
  aggregate: PageHeaderAggregator
}

type PageHeaderAggregator {
  count: Int
  totalCount: Int
}

type PageHeaderGroupBy {
  id: [PageHeaderConnectionId]
  created_at: [PageHeaderConnectionCreated_at]
  updated_at: [PageHeaderConnectionUpdated_at]
  describe_HTML_CSS: [PageHeaderConnectionDescribe_HTML_CSS]
  position: [PageHeaderConnectionPosition]
  published_at: [PageHeaderConnectionPublished_at]
}

type PageHeaderConnectionId {
  key: ID
  connection: PageHeaderConnection
}

type PageHeaderConnectionCreated_at {
  key: DateTime
  connection: PageHeaderConnection
}

type PageHeaderConnectionUpdated_at {
  key: DateTime
  connection: PageHeaderConnection
}

type PageHeaderConnectionDescribe_HTML_CSS {
  key: String
  connection: PageHeaderConnection
}

type PageHeaderConnectionPosition {
  key: String
  connection: PageHeaderConnection
}

type PageHeaderConnectionPublished_at {
  key: DateTime
  connection: PageHeaderConnection
}

input PageHeaderInput {
  describe_HTML_CSS: String
  position: ENUM_PAGEHEADER_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPageHeaderInput {
  describe_HTML_CSS: String
  position: ENUM_PAGEHEADER_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPageHeaderInput {
  data: PageHeaderInput
}

type createPageHeaderPayload {
  pageHeader: PageHeader
}

input updatePageHeaderInput {
  where: InputID
  data: editPageHeaderInput
}

type updatePageHeaderPayload {
  pageHeader: PageHeader
}

input deletePageHeaderInput {
  where: InputID
}

type deletePageHeaderPayload {
  pageHeader: PageHeader
}

type Parfums {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  productId: Long
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
}

type ParfumsConnection {
  values: [Parfums]
  groupBy: ParfumsGroupBy
  aggregate: ParfumsAggregator
}

type ParfumsAggregator {
  count: Int
  totalCount: Int
}

type ParfumsGroupBy {
  id: [ParfumsConnectionId]
  created_at: [ParfumsConnectionCreated_at]
  updated_at: [ParfumsConnectionUpdated_at]
  productId: [ParfumsConnectionProductId]
  published_at: [ParfumsConnectionPublished_at]
}

type ParfumsConnectionId {
  key: ID
  connection: ParfumsConnection
}

type ParfumsConnectionCreated_at {
  key: DateTime
  connection: ParfumsConnection
}

type ParfumsConnectionUpdated_at {
  key: DateTime
  connection: ParfumsConnection
}

type ParfumsConnectionProductId {
  key: ID
  connection: ParfumsConnection
}

type ParfumsConnectionPublished_at {
  key: DateTime
  connection: ParfumsConnection
}

input ParfumInput {
  productId: Long
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editParfumInput {
  productId: Long
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createParfumInput {
  data: ParfumInput
}

type createParfumPayload {
  parfum: Parfums
}

input updateParfumInput {
  where: InputID
  data: editParfumInput
}

type updateParfumPayload {
  parfum: Parfums
}

input deleteParfumInput {
  where: InputID
}

type deleteParfumPayload {
  parfum: Parfums
}

type PaymentOptions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text: String
  published_at: DateTime
}

type PaymentOptionsConnection {
  values: [PaymentOptions]
  groupBy: PaymentOptionsGroupBy
  aggregate: PaymentOptionsAggregator
}

type PaymentOptionsAggregator {
  count: Int
  totalCount: Int
}

type PaymentOptionsGroupBy {
  id: [PaymentOptionsConnectionId]
  created_at: [PaymentOptionsConnectionCreated_at]
  updated_at: [PaymentOptionsConnectionUpdated_at]
  text: [PaymentOptionsConnectionText]
  published_at: [PaymentOptionsConnectionPublished_at]
}

type PaymentOptionsConnectionId {
  key: ID
  connection: PaymentOptionsConnection
}

type PaymentOptionsConnectionCreated_at {
  key: DateTime
  connection: PaymentOptionsConnection
}

type PaymentOptionsConnectionUpdated_at {
  key: DateTime
  connection: PaymentOptionsConnection
}

type PaymentOptionsConnectionText {
  key: String
  connection: PaymentOptionsConnection
}

type PaymentOptionsConnectionPublished_at {
  key: DateTime
  connection: PaymentOptionsConnection
}

input PaymentOptionInput {
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPaymentOptionInput {
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPaymentOptionInput {
  data: PaymentOptionInput
}

type createPaymentOptionPayload {
  paymentOption: PaymentOptions
}

input updatePaymentOptionInput {
  where: InputID
  data: editPaymentOptionInput
}

type updatePaymentOptionPayload {
  paymentOption: PaymentOptions
}

input deletePaymentOptionInput {
  where: InputID
}

type deletePaymentOptionPayload {
  paymentOption: PaymentOptions
}

type PermanentDiscount {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  value: Long
  discount: Long
  published_at: DateTime
}

input PermanentDiscountInput {
  value: Long
  discount: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPermanentDiscountInput {
  value: Long
  discount: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updatePermanentDiscountInput {
  data: editPermanentDiscountInput
}

type updatePermanentDiscountPayload {
  permanentDiscount: PermanentDiscount
}

type deletePermanentDiscountPayload {
  permanentDiscount: PermanentDiscount
}

enum ENUM_PRODUCTWITHLEFTTEXT_POSITION {
  HomePageOne
  HomePageTwo
  HerrenPageOne
}

type ProductWithLeftText {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Header: String
  Title: String
  Text: String
  Button_text: String
  url: String
  position: ENUM_PRODUCTWITHLEFTTEXT_POSITION!
  published_at: DateTime
}

type ProductWithLeftTextConnection {
  values: [ProductWithLeftText]
  groupBy: ProductWithLeftTextGroupBy
  aggregate: ProductWithLeftTextAggregator
}

type ProductWithLeftTextAggregator {
  count: Int
  totalCount: Int
}

type ProductWithLeftTextGroupBy {
  id: [ProductWithLeftTextConnectionId]
  created_at: [ProductWithLeftTextConnectionCreated_at]
  updated_at: [ProductWithLeftTextConnectionUpdated_at]
  Header: [ProductWithLeftTextConnectionHeader]
  Title: [ProductWithLeftTextConnectionTitle]
  Text: [ProductWithLeftTextConnectionText]
  Button_text: [ProductWithLeftTextConnectionButton_text]
  url: [ProductWithLeftTextConnectionUrl]
  position: [ProductWithLeftTextConnectionPosition]
  published_at: [ProductWithLeftTextConnectionPublished_at]
}

type ProductWithLeftTextConnectionId {
  key: ID
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionCreated_at {
  key: DateTime
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionUpdated_at {
  key: DateTime
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionHeader {
  key: String
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionTitle {
  key: String
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionText {
  key: String
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionButton_text {
  key: String
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionUrl {
  key: String
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionPosition {
  key: String
  connection: ProductWithLeftTextConnection
}

type ProductWithLeftTextConnectionPublished_at {
  key: DateTime
  connection: ProductWithLeftTextConnection
}

input ProductWithLeftTextInput {
  Header: String
  Title: String
  Text: String
  Button_text: String
  url: String
  position: ENUM_PRODUCTWITHLEFTTEXT_POSITION!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductWithLeftTextInput {
  Header: String
  Title: String
  Text: String
  Button_text: String
  url: String
  position: ENUM_PRODUCTWITHLEFTTEXT_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductWithLeftTextInput {
  data: ProductWithLeftTextInput
}

type createProductWithLeftTextPayload {
  productWithLeftText: ProductWithLeftText
}

input updateProductWithLeftTextInput {
  where: InputID
  data: editProductWithLeftTextInput
}

type updateProductWithLeftTextPayload {
  productWithLeftText: ProductWithLeftText
}

input deleteProductWithLeftTextInput {
  where: InputID
}

type deleteProductWithLeftTextPayload {
  productWithLeftText: ProductWithLeftText
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  clean_product: Boolean
  name: String
  magazin_presentation: MagazinPresentation
  kind: String
  New_Date_Limit: Date
  video: UploadFile
  limited_edition: Boolean
  video_description: String
  video_status: String
  video_name: String
  approved_by_DPAB: Boolean
  EAN_barcodes: String
  top_10: Boolean
  fragrance_occasion: FragranceOccasion
  scent_note: ScentNotes
  direction_of_fragrance: DirectionOfFragrance
  active_ingredients: ActiveIngredients
  brand: Brand
  published_at: DateTime
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  favorite_products(sort: String, limit: Int, start: Int, where: JSON): [FavoriteProduct]
  variants_of_a_products(sort: String, limit: Int, start: Int, where: JSON): [VariantsOfAProduct]
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsAggregator {
  count: Int
  totalCount: Int
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  clean_product: [ProductsConnectionClean_product]
  name: [ProductsConnectionName]
  magazin_presentation: [ProductsConnectionMagazin_presentation]
  kind: [ProductsConnectionKind]
  New_Date_Limit: [ProductsConnectionNew_Date_Limit]
  video: [ProductsConnectionVideo]
  limited_edition: [ProductsConnectionLimited_edition]
  video_description: [ProductsConnectionVideo_description]
  video_status: [ProductsConnectionVideo_status]
  video_name: [ProductsConnectionVideo_name]
  approved_by_DPAB: [ProductsConnectionApproved_by_DPAB]
  EAN_barcodes: [ProductsConnectionEAN_barcodes]
  top_10: [ProductsConnectionTop_10]
  fragrance_occasion: [ProductsConnectionFragrance_occasion]
  scent_note: [ProductsConnectionScent_note]
  direction_of_fragrance: [ProductsConnectionDirection_of_fragrance]
  active_ingredients: [ProductsConnectionActive_ingredients]
  brand: [ProductsConnectionBrand]
  published_at: [ProductsConnectionPublished_at]
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionClean_product {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionName {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionMagazin_presentation {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionKind {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionNew_Date_Limit {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionVideo {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionLimited_edition {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionVideo_description {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionVideo_status {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionVideo_name {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionApproved_by_DPAB {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionEAN_barcodes {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionTop_10 {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionFragrance_occasion {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionScent_note {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionDirection_of_fragrance {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionActive_ingredients {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionBrand {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionPublished_at {
  key: DateTime
  connection: ProductsConnection
}

input ProductInput {
  images: [ID]
  clean_product: Boolean
  category: ID
  sub_category: ID
  menu_item: ID
  name: String
  magazin_presentation: ID
  kind: String
  New_Date_Limit: Date
  video: ID
  limited_edition: Boolean
  video_description: String
  video_status: String
  video_name: String
  favorite_products: [ID]
  approved_by_DPAB: Boolean
  EAN_barcodes: String
  variants_of_a_products: [ID]
  top_10: Boolean
  fragrance_occasion: ID
  scent_note: ID
  direction_of_fragrance: ID
  active_ingredients: ID
  brand: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  images: [ID]
  clean_product: Boolean
  category: ID
  sub_category: ID
  menu_item: ID
  name: String
  magazin_presentation: ID
  kind: String
  New_Date_Limit: Date
  video: ID
  limited_edition: Boolean
  video_description: String
  video_status: String
  video_name: String
  favorite_products: [ID]
  approved_by_DPAB: Boolean
  EAN_barcodes: String
  variants_of_a_products: [ID]
  top_10: Boolean
  fragrance_occasion: ID
  scent_note: ID
  direction_of_fragrance: ID
  active_ingredients: ID
  brand: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

type QuestionOrConcern {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  email: String!
  subject: String!
  Order_ID: String
  message: String!
  copy_to_me: Boolean
  privacy: Boolean
  published_at: DateTime
}

type QuestionOrConcernConnection {
  values: [QuestionOrConcern]
  groupBy: QuestionOrConcernGroupBy
  aggregate: QuestionOrConcernAggregator
}

type QuestionOrConcernAggregator {
  count: Int
  totalCount: Int
}

type QuestionOrConcernGroupBy {
  id: [QuestionOrConcernConnectionId]
  created_at: [QuestionOrConcernConnectionCreated_at]
  updated_at: [QuestionOrConcernConnectionUpdated_at]
  name: [QuestionOrConcernConnectionName]
  email: [QuestionOrConcernConnectionEmail]
  subject: [QuestionOrConcernConnectionSubject]
  Order_ID: [QuestionOrConcernConnectionOrder_ID]
  message: [QuestionOrConcernConnectionMessage]
  copy_to_me: [QuestionOrConcernConnectionCopy_to_me]
  privacy: [QuestionOrConcernConnectionPrivacy]
  published_at: [QuestionOrConcernConnectionPublished_at]
}

type QuestionOrConcernConnectionId {
  key: ID
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionCreated_at {
  key: DateTime
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionUpdated_at {
  key: DateTime
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionName {
  key: String
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionEmail {
  key: String
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionSubject {
  key: String
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionOrder_ID {
  key: String
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionMessage {
  key: String
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionCopy_to_me {
  key: Boolean
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionPrivacy {
  key: Boolean
  connection: QuestionOrConcernConnection
}

type QuestionOrConcernConnectionPublished_at {
  key: DateTime
  connection: QuestionOrConcernConnection
}

input QuestionOrConcernInput {
  name: String
  email: String!
  subject: String!
  Order_ID: String
  message: String!
  copy_to_me: Boolean
  privacy: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editQuestionOrConcernInput {
  name: String
  email: String
  subject: String
  Order_ID: String
  message: String
  copy_to_me: Boolean
  privacy: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createQuestionOrConcernInput {
  data: QuestionOrConcernInput
}

type createQuestionOrConcernPayload {
  questionOrConcern: QuestionOrConcern
}

input updateQuestionOrConcernInput {
  where: InputID
  data: editQuestionOrConcernInput
}

type updateQuestionOrConcernPayload {
  questionOrConcern: QuestionOrConcern
}

input deleteQuestionOrConcernInput {
  where: InputID
}

type deleteQuestionOrConcernPayload {
  questionOrConcern: QuestionOrConcern
}

type RegistrationPageData {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  register: String
  text_under_register: String
  text_top_of_form: String
  text_top_of_image: String
  images: UploadFile
  published_at: DateTime
  benefits(sort: String, limit: Int, start: Int, where: JSON): [BenefitsRegistrationPage]
}

input RegistrationPageDatumInput {
  register: String
  text_under_register: String
  text_top_of_form: String
  text_top_of_image: String
  benefits: [ID]
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRegistrationPageDatumInput {
  register: String
  text_under_register: String
  text_top_of_form: String
  text_top_of_image: String
  benefits: [ID]
  images: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateRegistrationPageDatumInput {
  data: editRegistrationPageDatumInput
}

type updateRegistrationPageDatumPayload {
  registrationPageDatum: RegistrationPageData
}

type deleteRegistrationPageDatumPayload {
  registrationPageDatum: RegistrationPageData
}

type ScentNotes {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  published_at: DateTime
}

type ScentNotesConnection {
  values: [ScentNotes]
  groupBy: ScentNotesGroupBy
  aggregate: ScentNotesAggregator
}

type ScentNotesAggregator {
  count: Int
  totalCount: Int
}

type ScentNotesGroupBy {
  id: [ScentNotesConnectionId]
  created_at: [ScentNotesConnectionCreated_at]
  updated_at: [ScentNotesConnectionUpdated_at]
  name: [ScentNotesConnectionName]
  published_at: [ScentNotesConnectionPublished_at]
}

type ScentNotesConnectionId {
  key: ID
  connection: ScentNotesConnection
}

type ScentNotesConnectionCreated_at {
  key: DateTime
  connection: ScentNotesConnection
}

type ScentNotesConnectionUpdated_at {
  key: DateTime
  connection: ScentNotesConnection
}

type ScentNotesConnectionName {
  key: String
  connection: ScentNotesConnection
}

type ScentNotesConnectionPublished_at {
  key: DateTime
  connection: ScentNotesConnection
}

input ScentNoteInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editScentNoteInput {
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createScentNoteInput {
  data: ScentNoteInput
}

type createScentNotePayload {
  scentNote: ScentNotes
}

input updateScentNoteInput {
  where: InputID
  data: editScentNoteInput
}

type updateScentNotePayload {
  scentNote: ScentNotes
}

input deleteScentNoteInput {
  where: InputID
}

type deleteScentNotePayload {
  scentNote: ScentNotes
}

enum ENUM_SECTIONUNDERNAVBAR_POSITION {
  HomePage
  HerrenPage
}

type SectionUnderNavbar {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  title: String
  button_text: String
  url: String
  images: UploadFile
  position: ENUM_SECTIONUNDERNAVBAR_POSITION!
  published_at: DateTime
}

type SectionUnderNavbarConnection {
  values: [SectionUnderNavbar]
  groupBy: SectionUnderNavbarGroupBy
  aggregate: SectionUnderNavbarAggregator
}

type SectionUnderNavbarAggregator {
  count: Int
  totalCount: Int
}

type SectionUnderNavbarGroupBy {
  id: [SectionUnderNavbarConnectionId]
  created_at: [SectionUnderNavbarConnectionCreated_at]
  updated_at: [SectionUnderNavbarConnectionUpdated_at]
  header: [SectionUnderNavbarConnectionHeader]
  title: [SectionUnderNavbarConnectionTitle]
  button_text: [SectionUnderNavbarConnectionButton_text]
  url: [SectionUnderNavbarConnectionUrl]
  images: [SectionUnderNavbarConnectionImages]
  position: [SectionUnderNavbarConnectionPosition]
  published_at: [SectionUnderNavbarConnectionPublished_at]
}

type SectionUnderNavbarConnectionId {
  key: ID
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionCreated_at {
  key: DateTime
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionUpdated_at {
  key: DateTime
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionHeader {
  key: String
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionTitle {
  key: String
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionButton_text {
  key: String
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionUrl {
  key: String
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionImages {
  key: ID
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionPosition {
  key: String
  connection: SectionUnderNavbarConnection
}

type SectionUnderNavbarConnectionPublished_at {
  key: DateTime
  connection: SectionUnderNavbarConnection
}

input SectionUnderNavbarInput {
  header: String
  title: String
  button_text: String
  url: String
  images: ID
  position: ENUM_SECTIONUNDERNAVBAR_POSITION!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSectionUnderNavbarInput {
  header: String
  title: String
  button_text: String
  url: String
  images: ID
  position: ENUM_SECTIONUNDERNAVBAR_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSectionUnderNavbarInput {
  data: SectionUnderNavbarInput
}

type createSectionUnderNavbarPayload {
  sectionUnderNavbar: SectionUnderNavbar
}

input updateSectionUnderNavbarInput {
  where: InputID
  data: editSectionUnderNavbarInput
}

type updateSectionUnderNavbarPayload {
  sectionUnderNavbar: SectionUnderNavbar
}

input deleteSectionUnderNavbarInput {
  where: InputID
}

type deleteSectionUnderNavbarPayload {
  sectionUnderNavbar: SectionUnderNavbar
}

enum ENUM_SHIPPINGCONDITIONS_POSITION {
  left
  right
}

type ShippingConditions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  text: String
  position: ENUM_SHIPPINGCONDITIONS_POSITION
  published_at: DateTime
}

type ShippingConditionsConnection {
  values: [ShippingConditions]
  groupBy: ShippingConditionsGroupBy
  aggregate: ShippingConditionsAggregator
}

type ShippingConditionsAggregator {
  count: Int
  totalCount: Int
}

type ShippingConditionsGroupBy {
  id: [ShippingConditionsConnectionId]
  created_at: [ShippingConditionsConnectionCreated_at]
  updated_at: [ShippingConditionsConnectionUpdated_at]
  header: [ShippingConditionsConnectionHeader]
  text: [ShippingConditionsConnectionText]
  position: [ShippingConditionsConnectionPosition]
  published_at: [ShippingConditionsConnectionPublished_at]
}

type ShippingConditionsConnectionId {
  key: ID
  connection: ShippingConditionsConnection
}

type ShippingConditionsConnectionCreated_at {
  key: DateTime
  connection: ShippingConditionsConnection
}

type ShippingConditionsConnectionUpdated_at {
  key: DateTime
  connection: ShippingConditionsConnection
}

type ShippingConditionsConnectionHeader {
  key: String
  connection: ShippingConditionsConnection
}

type ShippingConditionsConnectionText {
  key: String
  connection: ShippingConditionsConnection
}

type ShippingConditionsConnectionPosition {
  key: String
  connection: ShippingConditionsConnection
}

type ShippingConditionsConnectionPublished_at {
  key: DateTime
  connection: ShippingConditionsConnection
}

input ShippingConditionInput {
  header: String
  text: String
  position: ENUM_SHIPPINGCONDITIONS_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShippingConditionInput {
  header: String
  text: String
  position: ENUM_SHIPPINGCONDITIONS_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createShippingConditionInput {
  data: ShippingConditionInput
}

type createShippingConditionPayload {
  shippingCondition: ShippingConditions
}

input updateShippingConditionInput {
  where: InputID
  data: editShippingConditionInput
}

type updateShippingConditionPayload {
  shippingCondition: ShippingConditions
}

input deleteShippingConditionInput {
  where: InputID
}

type deleteShippingConditionPayload {
  shippingCondition: ShippingConditions
}

type ShippingMethod {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  images: UploadFile
  shipping_text: String
  header: String
  payment_text: String
  published_at: DateTime
  shipping_conditions(sort: String, limit: Int, start: Int, where: JSON): [ShippingConditions]
  our_bank_connections(sort: String, limit: Int, start: Int, where: JSON): [OurBankConnection]
  payment_options(sort: String, limit: Int, start: Int, where: JSON): [PaymentOptions]
}

input ShippingMethodInput {
  images: ID
  shipping_text: String
  header: String
  payment_text: String
  shipping_conditions: [ID]
  our_bank_connections: [ID]
  payment_options: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShippingMethodInput {
  images: ID
  shipping_text: String
  header: String
  payment_text: String
  shipping_conditions: [ID]
  our_bank_connections: [ID]
  payment_options: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateShippingMethodInput {
  data: editShippingMethodInput
}

type updateShippingMethodPayload {
  shippingMethod: ShippingMethod
}

type deleteShippingMethodPayload {
  shippingMethod: ShippingMethod
}

type ShippingText {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text_1: String
  text_2: String
  text_3: String
  text_4: String
  text_5: String
  published_at: DateTime
}

input ShippingTextInput {
  text_1: String
  text_2: String
  text_3: String
  text_4: String
  text_5: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShippingTextInput {
  text_1: String
  text_2: String
  text_3: String
  text_4: String
  text_5: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateShippingTextInput {
  data: editShippingTextInput
}

type updateShippingTextPayload {
  shippingText: ShippingText
}

type deleteShippingTextPayload {
  shippingText: ShippingText
}

type ShopPageLargeText {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  header: String
  text: String
  published_at: DateTime
}

type ShopPageLargeTextConnection {
  values: [ShopPageLargeText]
  groupBy: ShopPageLargeTextGroupBy
  aggregate: ShopPageLargeTextAggregator
}

type ShopPageLargeTextAggregator {
  count: Int
  totalCount: Int
}

type ShopPageLargeTextGroupBy {
  id: [ShopPageLargeTextConnectionId]
  created_at: [ShopPageLargeTextConnectionCreated_at]
  updated_at: [ShopPageLargeTextConnectionUpdated_at]
  header: [ShopPageLargeTextConnectionHeader]
  text: [ShopPageLargeTextConnectionText]
  published_at: [ShopPageLargeTextConnectionPublished_at]
}

type ShopPageLargeTextConnectionId {
  key: ID
  connection: ShopPageLargeTextConnection
}

type ShopPageLargeTextConnectionCreated_at {
  key: DateTime
  connection: ShopPageLargeTextConnection
}

type ShopPageLargeTextConnectionUpdated_at {
  key: DateTime
  connection: ShopPageLargeTextConnection
}

type ShopPageLargeTextConnectionHeader {
  key: String
  connection: ShopPageLargeTextConnection
}

type ShopPageLargeTextConnectionText {
  key: String
  connection: ShopPageLargeTextConnection
}

type ShopPageLargeTextConnectionPublished_at {
  key: DateTime
  connection: ShopPageLargeTextConnection
}

input ShopPageLargeTextInput {
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShopPageLargeTextInput {
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createShopPageLargeTextInput {
  data: ShopPageLargeTextInput
}

type createShopPageLargeTextPayload {
  shopPageLargeText: ShopPageLargeText
}

input updateShopPageLargeTextInput {
  where: InputID
  data: editShopPageLargeTextInput
}

type updateShopPageLargeTextPayload {
  shopPageLargeText: ShopPageLargeText
}

input deleteShopPageLargeTextInput {
  where: InputID
}

type deleteShopPageLargeTextPayload {
  shopPageLargeText: ShopPageLargeText
}

type ShoppingBasketRecommendation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  to: String
  from: String
  current_shopping_basket_product_id: JSON
  published_at: DateTime
}

type ShoppingBasketRecommendationConnection {
  values: [ShoppingBasketRecommendation]
  groupBy: ShoppingBasketRecommendationGroupBy
  aggregate: ShoppingBasketRecommendationAggregator
}

type ShoppingBasketRecommendationAggregator {
  count: Int
  totalCount: Int
}

type ShoppingBasketRecommendationGroupBy {
  id: [ShoppingBasketRecommendationConnectionId]
  created_at: [ShoppingBasketRecommendationConnectionCreated_at]
  updated_at: [ShoppingBasketRecommendationConnectionUpdated_at]
  to: [ShoppingBasketRecommendationConnectionTo]
  from: [ShoppingBasketRecommendationConnectionFrom]
  current_shopping_basket_product_id: [ShoppingBasketRecommendationConnectionCurrent_shopping_basket_product_id]
  published_at: [ShoppingBasketRecommendationConnectionPublished_at]
}

type ShoppingBasketRecommendationConnectionId {
  key: ID
  connection: ShoppingBasketRecommendationConnection
}

type ShoppingBasketRecommendationConnectionCreated_at {
  key: DateTime
  connection: ShoppingBasketRecommendationConnection
}

type ShoppingBasketRecommendationConnectionUpdated_at {
  key: DateTime
  connection: ShoppingBasketRecommendationConnection
}

type ShoppingBasketRecommendationConnectionTo {
  key: String
  connection: ShoppingBasketRecommendationConnection
}

type ShoppingBasketRecommendationConnectionFrom {
  key: String
  connection: ShoppingBasketRecommendationConnection
}

type ShoppingBasketRecommendationConnectionCurrent_shopping_basket_product_id {
  key: JSON
  connection: ShoppingBasketRecommendationConnection
}

type ShoppingBasketRecommendationConnectionPublished_at {
  key: DateTime
  connection: ShoppingBasketRecommendationConnection
}

input ShoppingBasketRecommendationInput {
  to: String
  from: String
  current_shopping_basket_product_id: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShoppingBasketRecommendationInput {
  to: String
  from: String
  current_shopping_basket_product_id: JSON
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createShoppingBasketRecommendationInput {
  data: ShoppingBasketRecommendationInput
}

type createShoppingBasketRecommendationPayload {
  shoppingBasketRecommendation: ShoppingBasketRecommendation
}

input updateShoppingBasketRecommendationInput {
  where: InputID
  data: editShoppingBasketRecommendationInput
}

type updateShoppingBasketRecommendationPayload {
  shoppingBasketRecommendation: ShoppingBasketRecommendation
}

input deleteShoppingBasketRecommendationInput {
  where: InputID
}

type deleteShoppingBasketRecommendationPayload {
  shoppingBasketRecommendation: ShoppingBasketRecommendation
}

type ShoppingBasket {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  users_permissions_user: UsersPermissionsUser
  product: Products
  gift_wrap: GiftWrap
  quantity: Long
  variant_id: Long!
  type_test: Boolean
  product_id: Long
  published_at: DateTime
}

type ShoppingBasketConnection {
  values: [ShoppingBasket]
  groupBy: ShoppingBasketGroupBy
  aggregate: ShoppingBasketAggregator
}

type ShoppingBasketAggregator {
  count: Int
  totalCount: Int
}

type ShoppingBasketGroupBy {
  id: [ShoppingBasketConnectionId]
  created_at: [ShoppingBasketConnectionCreated_at]
  updated_at: [ShoppingBasketConnectionUpdated_at]
  users_permissions_user: [ShoppingBasketConnectionUsers_permissions_user]
  product: [ShoppingBasketConnectionProduct]
  gift_wrap: [ShoppingBasketConnectionGift_wrap]
  quantity: [ShoppingBasketConnectionQuantity]
  variant_id: [ShoppingBasketConnectionVariant_id]
  type_test: [ShoppingBasketConnectionType_test]
  product_id: [ShoppingBasketConnectionProduct_id]
  published_at: [ShoppingBasketConnectionPublished_at]
}

type ShoppingBasketConnectionId {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionCreated_at {
  key: DateTime
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionUpdated_at {
  key: DateTime
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionUsers_permissions_user {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionProduct {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionGift_wrap {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionQuantity {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionVariant_id {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionType_test {
  key: Boolean
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionProduct_id {
  key: ID
  connection: ShoppingBasketConnection
}

type ShoppingBasketConnectionPublished_at {
  key: DateTime
  connection: ShoppingBasketConnection
}

input ShoppingBasketInput {
  users_permissions_user: ID
  product: ID
  gift_wrap: ID
  quantity: Long
  variant_id: Long!
  type_test: Boolean
  product_id: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editShoppingBasketInput {
  users_permissions_user: ID
  product: ID
  gift_wrap: ID
  quantity: Long
  variant_id: Long
  type_test: Boolean
  product_id: Long
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createShoppingBasketInput {
  data: ShoppingBasketInput
}

type createShoppingBasketPayload {
  shoppingBasket: ShoppingBasket
}

input updateShoppingBasketInput {
  where: InputID
  data: editShoppingBasketInput
}

type updateShoppingBasketPayload {
  shoppingBasket: ShoppingBasket
}

input deleteShoppingBasketInput {
  where: InputID
}

type deleteShoppingBasketPayload {
  shoppingBasket: ShoppingBasket
}

enum ENUM_STAIRSECTION_POSITION {
  One
  Two
  Three
  Four
  Five
  Six
}

type StairSection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  image: UploadFile
  header: String
  text: String
  date: DateTime
  position: ENUM_STAIRSECTION_POSITION!
  published_at: DateTime
}

type StairSectionConnection {
  values: [StairSection]
  groupBy: StairSectionGroupBy
  aggregate: StairSectionAggregator
}

type StairSectionAggregator {
  count: Int
  totalCount: Int
}

type StairSectionGroupBy {
  id: [StairSectionConnectionId]
  created_at: [StairSectionConnectionCreated_at]
  updated_at: [StairSectionConnectionUpdated_at]
  image: [StairSectionConnectionImage]
  header: [StairSectionConnectionHeader]
  text: [StairSectionConnectionText]
  date: [StairSectionConnectionDate]
  position: [StairSectionConnectionPosition]
  published_at: [StairSectionConnectionPublished_at]
}

type StairSectionConnectionId {
  key: ID
  connection: StairSectionConnection
}

type StairSectionConnectionCreated_at {
  key: DateTime
  connection: StairSectionConnection
}

type StairSectionConnectionUpdated_at {
  key: DateTime
  connection: StairSectionConnection
}

type StairSectionConnectionImage {
  key: ID
  connection: StairSectionConnection
}

type StairSectionConnectionHeader {
  key: String
  connection: StairSectionConnection
}

type StairSectionConnectionText {
  key: String
  connection: StairSectionConnection
}

type StairSectionConnectionDate {
  key: DateTime
  connection: StairSectionConnection
}

type StairSectionConnectionPosition {
  key: String
  connection: StairSectionConnection
}

type StairSectionConnectionPublished_at {
  key: DateTime
  connection: StairSectionConnection
}

input StairSectionInput {
  image: ID
  header: String
  text: String
  date: DateTime
  position: ENUM_STAIRSECTION_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editStairSectionInput {
  image: ID
  header: String
  text: String
  date: DateTime
  position: ENUM_STAIRSECTION_POSITION
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createStairSectionInput {
  data: StairSectionInput
}

type createStairSectionPayload {
  stairSection: StairSection
}

input updateStairSectionInput {
  where: InputID
  data: editStairSectionInput
}

type updateStairSectionPayload {
  stairSection: StairSection
}

input deleteStairSectionInput {
  where: InputID
}

type deleteStairSectionPayload {
  stairSection: StairSection
}

type Style {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  images: UploadFile
  text: String
  link_text: String
  link: String
  published_at: DateTime
}

type StyleConnection {
  values: [Style]
  groupBy: StyleGroupBy
  aggregate: StyleAggregator
}

type StyleAggregator {
  count: Int
  totalCount: Int
}

type StyleGroupBy {
  id: [StyleConnectionId]
  created_at: [StyleConnectionCreated_at]
  updated_at: [StyleConnectionUpdated_at]
  images: [StyleConnectionImages]
  text: [StyleConnectionText]
  link_text: [StyleConnectionLink_text]
  link: [StyleConnectionLink]
  published_at: [StyleConnectionPublished_at]
}

type StyleConnectionId {
  key: ID
  connection: StyleConnection
}

type StyleConnectionCreated_at {
  key: DateTime
  connection: StyleConnection
}

type StyleConnectionUpdated_at {
  key: DateTime
  connection: StyleConnection
}

type StyleConnectionImages {
  key: ID
  connection: StyleConnection
}

type StyleConnectionText {
  key: String
  connection: StyleConnection
}

type StyleConnectionLink_text {
  key: String
  connection: StyleConnection
}

type StyleConnectionLink {
  key: String
  connection: StyleConnection
}

type StyleConnectionPublished_at {
  key: DateTime
  connection: StyleConnection
}

input StyleInput {
  images: ID
  text: String
  link_text: String
  link: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editStyleInput {
  images: ID
  text: String
  link_text: String
  link: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createStyleInput {
  data: StyleInput
}

type createStylePayload {
  style: Style
}

input updateStyleInput {
  where: InputID
  data: editStyleInput
}

type updateStylePayload {
  style: Style
}

input deleteStyleInput {
  where: InputID
}

type deleteStylePayload {
  style: Style
}

type SubCategory {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  SubCategoryName: String!
  published_at: DateTime
}

type SubCategoryConnection {
  values: [SubCategory]
  groupBy: SubCategoryGroupBy
  aggregate: SubCategoryAggregator
}

type SubCategoryAggregator {
  count: Int
  totalCount: Int
}

type SubCategoryGroupBy {
  id: [SubCategoryConnectionId]
  created_at: [SubCategoryConnectionCreated_at]
  updated_at: [SubCategoryConnectionUpdated_at]
  SubCategoryName: [SubCategoryConnectionSubCategoryName]
  published_at: [SubCategoryConnectionPublished_at]
}

type SubCategoryConnectionId {
  key: ID
  connection: SubCategoryConnection
}

type SubCategoryConnectionCreated_at {
  key: DateTime
  connection: SubCategoryConnection
}

type SubCategoryConnectionUpdated_at {
  key: DateTime
  connection: SubCategoryConnection
}

type SubCategoryConnectionSubCategoryName {
  key: String
  connection: SubCategoryConnection
}

type SubCategoryConnectionPublished_at {
  key: DateTime
  connection: SubCategoryConnection
}

input SubCategoryInput {
  SubCategoryName: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSubCategoryInput {
  SubCategoryName: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSubCategoryInput {
  data: SubCategoryInput
}

type createSubCategoryPayload {
  subCategory: SubCategory
}

input updateSubCategoryInput {
  where: InputID
  data: editSubCategoryInput
}

type updateSubCategoryPayload {
  subCategory: SubCategory
}

input deleteSubCategoryInput {
  where: InputID
}

type deleteSubCategoryPayload {
  subCategory: SubCategory
}

type TopOfTheFooter {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  images: UploadFile
  header: String
  text: String
  published_at: DateTime
}

type TopOfTheFooterConnection {
  values: [TopOfTheFooter]
  groupBy: TopOfTheFooterGroupBy
  aggregate: TopOfTheFooterAggregator
}

type TopOfTheFooterAggregator {
  count: Int
  totalCount: Int
}

type TopOfTheFooterGroupBy {
  id: [TopOfTheFooterConnectionId]
  created_at: [TopOfTheFooterConnectionCreated_at]
  updated_at: [TopOfTheFooterConnectionUpdated_at]
  images: [TopOfTheFooterConnectionImages]
  header: [TopOfTheFooterConnectionHeader]
  text: [TopOfTheFooterConnectionText]
  published_at: [TopOfTheFooterConnectionPublished_at]
}

type TopOfTheFooterConnectionId {
  key: ID
  connection: TopOfTheFooterConnection
}

type TopOfTheFooterConnectionCreated_at {
  key: DateTime
  connection: TopOfTheFooterConnection
}

type TopOfTheFooterConnectionUpdated_at {
  key: DateTime
  connection: TopOfTheFooterConnection
}

type TopOfTheFooterConnectionImages {
  key: ID
  connection: TopOfTheFooterConnection
}

type TopOfTheFooterConnectionHeader {
  key: String
  connection: TopOfTheFooterConnection
}

type TopOfTheFooterConnectionText {
  key: String
  connection: TopOfTheFooterConnection
}

type TopOfTheFooterConnectionPublished_at {
  key: DateTime
  connection: TopOfTheFooterConnection
}

input TopOfTheFooterInput {
  images: ID
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editTopOfTheFooterInput {
  images: ID
  header: String
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createTopOfTheFooterInput {
  data: TopOfTheFooterInput
}

type createTopOfTheFooterPayload {
  topOfTheFooter: TopOfTheFooter
}

input updateTopOfTheFooterInput {
  where: InputID
  data: editTopOfTheFooterInput
}

type updateTopOfTheFooterPayload {
  topOfTheFooter: TopOfTheFooter
}

input deleteTopOfTheFooterInput {
  where: InputID
}

type deleteTopOfTheFooterPayload {
  topOfTheFooter: TopOfTheFooter
}

type UserNewsletter {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  First_name: String
  Surname: String
  Gender: String
  Email: String
  published_at: DateTime
}

type UserNewsletterConnection {
  values: [UserNewsletter]
  groupBy: UserNewsletterGroupBy
  aggregate: UserNewsletterAggregator
}

type UserNewsletterAggregator {
  count: Int
  totalCount: Int
}

type UserNewsletterGroupBy {
  id: [UserNewsletterConnectionId]
  created_at: [UserNewsletterConnectionCreated_at]
  updated_at: [UserNewsletterConnectionUpdated_at]
  First_name: [UserNewsletterConnectionFirst_name]
  Surname: [UserNewsletterConnectionSurname]
  Gender: [UserNewsletterConnectionGender]
  Email: [UserNewsletterConnectionEmail]
  published_at: [UserNewsletterConnectionPublished_at]
}

type UserNewsletterConnectionId {
  key: ID
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionCreated_at {
  key: DateTime
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionUpdated_at {
  key: DateTime
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionFirst_name {
  key: String
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionSurname {
  key: String
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionGender {
  key: String
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionEmail {
  key: String
  connection: UserNewsletterConnection
}

type UserNewsletterConnectionPublished_at {
  key: DateTime
  connection: UserNewsletterConnection
}

input UserNewsletterInput {
  First_name: String
  Surname: String
  Gender: String
  Email: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editUserNewsletterInput {
  First_name: String
  Surname: String
  Gender: String
  Email: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createUserNewsletterInput {
  data: UserNewsletterInput
}

type createUserNewsletterPayload {
  userNewsletter: UserNewsletter
}

input updateUserNewsletterInput {
  where: InputID
  data: editUserNewsletterInput
}

type updateUserNewsletterPayload {
  userNewsletter: UserNewsletter
}

input deleteUserNewsletterInput {
  where: InputID
}

type deleteUserNewsletterPayload {
  userNewsletter: UserNewsletter
}

type VariantsOfAProduct {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  bottle_sizes: Float!
  price: Float
  main: Boolean!
  quantity: Long
  sample: Boolean!
  published_at: DateTime
  favorite_products(sort: String, limit: Int, start: Int, where: JSON): [FavoriteProduct]
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type VariantsOfAProductConnection {
  values: [VariantsOfAProduct]
  groupBy: VariantsOfAProductGroupBy
  aggregate: VariantsOfAProductAggregator
}

type VariantsOfAProductAggregator {
  count: Int
  totalCount: Int
  sum: VariantsOfAProductAggregatorSum
  avg: VariantsOfAProductAggregatorAvg
  min: VariantsOfAProductAggregatorMin
  max: VariantsOfAProductAggregatorMax
}

type VariantsOfAProductAggregatorSum {
  bottle_sizes: Float
  price: Float
}

type VariantsOfAProductAggregatorAvg {
  bottle_sizes: Float
  price: Float
}

type VariantsOfAProductAggregatorMin {
  bottle_sizes: Float
  price: Float
}

type VariantsOfAProductAggregatorMax {
  bottle_sizes: Float
  price: Float
}

type VariantsOfAProductGroupBy {
  id: [VariantsOfAProductConnectionId]
  created_at: [VariantsOfAProductConnectionCreated_at]
  updated_at: [VariantsOfAProductConnectionUpdated_at]
  bottle_sizes: [VariantsOfAProductConnectionBottle_sizes]
  price: [VariantsOfAProductConnectionPrice]
  main: [VariantsOfAProductConnectionMain]
  quantity: [VariantsOfAProductConnectionQuantity]
  sample: [VariantsOfAProductConnectionSample]
  published_at: [VariantsOfAProductConnectionPublished_at]
}

type VariantsOfAProductConnectionId {
  key: ID
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionCreated_at {
  key: DateTime
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionUpdated_at {
  key: DateTime
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionBottle_sizes {
  key: Float
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionPrice {
  key: Float
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionMain {
  key: Boolean
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionQuantity {
  key: ID
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionSample {
  key: Boolean
  connection: VariantsOfAProductConnection
}

type VariantsOfAProductConnectionPublished_at {
  key: DateTime
  connection: VariantsOfAProductConnection
}

input VariantsOfAProductInput {
  bottle_sizes: Float!
  price: Float
  main: Boolean
  favorite_products: [ID]
  quantity: Long
  sample: Boolean
  images: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editVariantsOfAProductInput {
  bottle_sizes: Float
  price: Float
  main: Boolean
  favorite_products: [ID]
  quantity: Long
  sample: Boolean
  images: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createVariantsOfAProductInput {
  data: VariantsOfAProductInput
}

type createVariantsOfAProductPayload {
  variantsOfAProduct: VariantsOfAProduct
}

input updateVariantsOfAProductInput {
  where: InputID
  data: editVariantsOfAProductInput
}

type updateVariantsOfAProductPayload {
  variantsOfAProduct: VariantsOfAProduct
}

input deleteVariantsOfAProductInput {
  where: InputID
}

type deleteVariantsOfAProductPayload {
  variantsOfAProduct: VariantsOfAProduct
}

type Videos {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  video_status: String
  video_name: String
  description: String
  url: String
  video_id: Long
  bookmark: Bookmark
  published_at: DateTime
}

type VideosConnection {
  values: [Videos]
  groupBy: VideosGroupBy
  aggregate: VideosAggregator
}

type VideosAggregator {
  count: Int
  totalCount: Int
}

type VideosGroupBy {
  id: [VideosConnectionId]
  created_at: [VideosConnectionCreated_at]
  updated_at: [VideosConnectionUpdated_at]
  video_status: [VideosConnectionVideo_status]
  video_name: [VideosConnectionVideo_name]
  description: [VideosConnectionDescription]
  url: [VideosConnectionUrl]
  video_id: [VideosConnectionVideo_id]
  bookmark: [VideosConnectionBookmark]
  published_at: [VideosConnectionPublished_at]
}

type VideosConnectionId {
  key: ID
  connection: VideosConnection
}

type VideosConnectionCreated_at {
  key: DateTime
  connection: VideosConnection
}

type VideosConnectionUpdated_at {
  key: DateTime
  connection: VideosConnection
}

type VideosConnectionVideo_status {
  key: String
  connection: VideosConnection
}

type VideosConnectionVideo_name {
  key: String
  connection: VideosConnection
}

type VideosConnectionDescription {
  key: String
  connection: VideosConnection
}

type VideosConnectionUrl {
  key: String
  connection: VideosConnection
}

type VideosConnectionVideo_id {
  key: ID
  connection: VideosConnection
}

type VideosConnectionBookmark {
  key: ID
  connection: VideosConnection
}

type VideosConnectionPublished_at {
  key: DateTime
  connection: VideosConnection
}

input VideoInput {
  video_status: String
  video_name: String
  description: String
  url: String
  video_id: Long
  bookmark: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editVideoInput {
  video_status: String
  video_name: String
  description: String
  url: String
  video_id: Long
  bookmark: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createVideoInput {
  data: VideoInput
}

type createVideoPayload {
  video: Videos
}

input updateVideoInput {
  where: InputID
  data: editVideoInput
}

type updateVideoPayload {
  video: Videos
}

input deleteVideoInput {
  where: InputID
}

type deleteVideoPayload {
  video: Videos
}

type YourWishlistText {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text: String
  published_at: DateTime
}

input YourWishlistTextInput {
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editYourWishlistTextInput {
  text: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateYourWishlistTextInput {
  data: editYourWishlistTextInput
}

type updateYourWishlistTextPayload {
  yourWishlistText: YourWishlistText
}

type deleteYourWishlistTextPayload {
  yourWishlistText: YourWishlistText
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  regular_customer: Boolean
  surname: String!
  country: String
  date: Date
  favorite_products(sort: String, limit: Int, start: Int, where: JSON): [FavoriteProduct]
  billing_addresses(sort: String, limit: Int, start: Int, where: JSON): [BillingAddresses]
  delivery_addresses(sort: String, limit: Int, start: Int, where: JSON): [DeliveryAddress]
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  regular_customer: [UsersPermissionsUserConnectionRegular_customer]
  surname: [UsersPermissionsUserConnectionSurname]
  country: [UsersPermissionsUserConnectionCountry]
  date: [UsersPermissionsUserConnectionDate]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRegular_customer {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionSurname {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCountry {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionDate {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  regular_customer: Boolean
  favorite_products: [ID]
  surname: String!
  country: String
  date: Date
  billing_addresses: [ID]
  delivery_addresses: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  regular_customer: Boolean
  favorite_products: [ID]
  surname: String
  country: String
  date: Date
  billing_addresses: [ID]
  delivery_addresses: [ID]
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | ActiveIngredients | ActiveIngredientsConnection | ActiveIngredientsAggregator | ActiveIngredientsGroupBy | ActiveIngredientsConnectionId | ActiveIngredientsConnectionCreated_at | ActiveIngredientsConnectionUpdated_at | ActiveIngredientsConnectionName | ActiveIngredientsConnectionPublished_at | createActiveIngredientPayload | updateActiveIngredientPayload | deleteActiveIngredientPayload | ApprovedByUs | updateApprovedByUsPayload | deleteApprovedByUsPayload | Beauty | BeautyConnection | BeautyAggregator | BeautyGroupBy | BeautyConnectionId | BeautyConnectionCreated_at | BeautyConnectionUpdated_at | BeautyConnectionProductId | BeautyConnectionPublished_at | createBeautyPayload | updateBeautyPayload | deleteBeautyPayload | BenefitsRegistrationPage | BenefitsRegistrationPageConnection | BenefitsRegistrationPageAggregator | BenefitsRegistrationPageGroupBy | BenefitsRegistrationPageConnectionId | BenefitsRegistrationPageConnectionCreated_at | BenefitsRegistrationPageConnectionUpdated_at | BenefitsRegistrationPageConnectionBenefit | BenefitsRegistrationPageConnectionIcon | BenefitsRegistrationPageConnectionPublished_at | createBenefitsRegistrationPagePayload | updateBenefitsRegistrationPagePayload | deleteBenefitsRegistrationPagePayload | BillingAddresses | BillingAddressesConnection | BillingAddressesAggregator | BillingAddressesAggregatorSum | BillingAddressesAggregatorAvg | BillingAddressesAggregatorMin | BillingAddressesAggregatorMax | BillingAddressesGroupBy | BillingAddressesConnectionId | BillingAddressesConnectionCreated_at | BillingAddressesConnectionUpdated_at | BillingAddressesConnectionFirst_name | BillingAddressesConnectionSurname | BillingAddressesConnectionAddress_line | BillingAddressesConnectionRoad | BillingAddressesConnectionHouse_number | BillingAddressesConnectionPlace | BillingAddressesConnectionCountry | BillingAddressesConnectionPostcode | BillingAddressesConnectionUsers_permissions_user | BillingAddressesConnectionPublished_at | createBillingAddressPayload | updateBillingAddressPayload | deleteBillingAddressPayload | Bookmark | BookmarkConnection | BookmarkAggregator | BookmarkGroupBy | BookmarkConnectionId | BookmarkConnectionCreated_at | BookmarkConnectionUpdated_at | BookmarkConnectionUsers_permissions_user | BookmarkConnectionVideo | BookmarkConnectionPublished_at | createBookmarkPayload | updateBookmarkPayload | deleteBookmarkPayload | BrandPageAllData | updateBrandPageAllDatumPayload | deleteBrandPageAllDatumPayload | BrandPageData | BrandPageDataConnection | BrandPageDataAggregator | BrandPageDataGroupBy | BrandPageDataConnectionId | BrandPageDataConnectionCreated_at | BrandPageDataConnectionUpdated_at | BrandPageDataConnectionHeader_title | BrandPageDataConnectionHeader_head | BrandPageDataConnectionHeader_text | BrandPageDataConnectionHeader_link | BrandPageDataConnectionHeader_btn | BrandPageDataConnectionHeader_img | BrandPageDataConnectionSummary_img | BrandPageDataConnectionSummary_title | BrandPageDataConnectionSummary_head | BrandPageDataConnectionSummary_head2 | BrandPageDataConnectionSummary_text | BrandPageDataConnectionSummary_link | BrandPageDataConnectionSummary_linktxt | BrandPageDataConnectionBrand_portrait_title | BrandPageDataConnectionBrand_portraid_head | BrandPageDataConnectionBrand_portraid_desc | BrandPageDataConnectionBrand_portraid_text | BrandPageDataConnectionBrand_portraid_quote | BrandPageDataConnectionBrand_portraid_img | BrandPageDataConnectionBrand_portraid_imgtext | BrandPageDataConnectionActive_ingridients_img | BrandPageDataConnectionActive_ingridients_imgtext | BrandPageDataConnectionActive_ingridients_title | BrandPageDataConnectionActive_ingridients_header | BrandPageDataConnectionActive_ingridients_text | BrandPageDataConnectionCare_products_desc | BrandPageDataConnectionApplication_img | BrandPageDataConnectionApplication_imgtext | BrandPageDataConnectionAplication_title | BrandPageDataConnectionApplication_header | BrandPageDataConnectionApplication_text | BrandPageDataConnectionPress_reviews_title | BrandPageDataConnectionPress_reviews_header | BrandPageDataConnectionPress_reviews_text | BrandPageDataConnectionPress_reviews_img | BrandPageDataConnectionPress_reviews_imgtext | BrandPageDataConnectionPublished_at | createBrandPageDatumPayload | updateBrandPageDatumPayload | deleteBrandPageDatumPayload | BrandPageSection3 | BrandPageSection3Connection | BrandPageSection3Aggregator | BrandPageSection3GroupBy | BrandPageSection3ConnectionId | BrandPageSection3ConnectionCreated_at | BrandPageSection3ConnectionUpdated_at | BrandPageSection3ConnectionLink | BrandPageSection3ConnectionLink_text | BrandPageSection3ConnectionText | BrandPageSection3ConnectionImages | BrandPageSection3ConnectionImage_position | BrandPageSection3ConnectionPublished_at | createBrandPageSection3Payload | updateBrandPageSection3Payload | deleteBrandPageSection3Payload | BrandPageSection4 | BrandPageSection4Connection | BrandPageSection4Aggregator | BrandPageSection4GroupBy | BrandPageSection4ConnectionId | BrandPageSection4ConnectionCreated_at | BrandPageSection4ConnectionUpdated_at | BrandPageSection4ConnectionNumber | BrandPageSection4ConnectionText | BrandPageSection4ConnectionPublished_at | createBrandPageSection4Payload | updateBrandPageSection4Payload | deleteBrandPageSection4Payload | BrandPageSection5 | BrandPageSection5Connection | BrandPageSection5Aggregator | BrandPageSection5GroupBy | BrandPageSection5ConnectionId | BrandPageSection5ConnectionCreated_at | BrandPageSection5ConnectionUpdated_at | BrandPageSection5ConnectionLink | BrandPageSection5ConnectionLink_text | BrandPageSection5ConnectionImages | BrandPageSection5ConnectionPublished_at | createBrandPageSection5Payload | updateBrandPageSection5Payload | deleteBrandPageSection5Payload | Brand | BrandConnection | BrandAggregator | BrandGroupBy | BrandConnectionId | BrandConnectionCreated_at | BrandConnectionUpdated_at | BrandConnectionName | BrandConnectionPublished_at | createBrandPayload | updateBrandPayload | deleteBrandPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionCategoryName | CategoryConnectionPublished_at | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | CollectionShop | CollectionShopConnection | CollectionShopAggregator | CollectionShopGroupBy | CollectionShopConnectionId | CollectionShopConnectionCreated_at | CollectionShopConnectionUpdated_at | CollectionShopConnectionHeader | CollectionShopConnectionTitle | CollectionShopConnectionUrl | CollectionShopConnectionImages | CollectionShopConnectionLink_text | CollectionShopConnectionPosition | CollectionShopConnectionPublished_at | createCollectionShopPayload | updateCollectionShopPayload | deleteCollectionShopPayload | ContactDetails | ContactDetailsConnection | ContactDetailsAggregator | ContactDetailsGroupBy | ContactDetailsConnectionId | ContactDetailsConnectionCreated_at | ContactDetailsConnectionUpdated_at | ContactDetailsConnectionEmail | ContactDetailsConnectionPhone_number | ContactDetailsConnectionPublished_at | createContactDetailPayload | updateContactDetailPayload | deleteContactDetailPayload | ContactPageText | updateContactPageTextPayload | deleteContactPageTextPayload | Contact | ContactConnection | ContactAggregator | ContactGroupBy | ContactConnectionId | ContactConnectionCreated_at | ContactConnectionUpdated_at | ContactConnectionTitle | ContactConnectionValue | ContactConnectionPublished_at | createContactPayload | updateContactPayload | deleteContactPayload | CountryData | updateCountryDatumPayload | deleteCountryDatumPayload | DeliveryAddress | DeliveryAddressConnection | DeliveryAddressAggregator | DeliveryAddressAggregatorSum | DeliveryAddressAggregatorAvg | DeliveryAddressAggregatorMin | DeliveryAddressAggregatorMax | DeliveryAddressGroupBy | DeliveryAddressConnectionId | DeliveryAddressConnectionCreated_at | DeliveryAddressConnectionUpdated_at | DeliveryAddressConnectionFirst_name | DeliveryAddressConnectionSurname | DeliveryAddressConnectionAddress_line | DeliveryAddressConnectionRoad | DeliveryAddressConnectionHouse_number | DeliveryAddressConnectionPlace | DeliveryAddressConnectionCountry | DeliveryAddressConnectionPostcode | DeliveryAddressConnectionUsers_permissions_user | DeliveryAddressConnectionPublished_at | createDeliveryAddressPayload | updateDeliveryAddressPayload | deleteDeliveryAddressPayload | DirectionOfFragrance | DirectionOfFragranceConnection | DirectionOfFragranceAggregator | DirectionOfFragranceGroupBy | DirectionOfFragranceConnectionId | DirectionOfFragranceConnectionCreated_at | DirectionOfFragranceConnectionUpdated_at | DirectionOfFragranceConnectionName | DirectionOfFragranceConnectionPublished_at | createDirectionOfFragrancePayload | updateDirectionOfFragrancePayload | deleteDirectionOfFragrancePayload | DiscountCodes | DiscountCodesConnection | DiscountCodesAggregator | DiscountCodesGroupBy | DiscountCodesConnectionId | DiscountCodesConnectionCreated_at | DiscountCodesConnectionUpdated_at | DiscountCodesConnectionName | DiscountCodesConnectionDescription | DiscountCodesConnectionStatus_voucher | DiscountCodesConnectionUnique_multiple | DiscountCodesConnectionMultiple_redemptions | DiscountCodesConnectionOne_redemption | DiscountCodesConnectionRedeem_until_usedup | DiscountCodesConnectionSingle_redemption | DiscountCodesConnectionMinimum_order_value | DiscountCodesConnectionValid_from_date_time | DiscountCodesConnectionValid_to_date_time | DiscountCodesConnectionCode_character_length | DiscountCodesConnectionAmount_discount | DiscountCodesConnectionType_of_discount | DiscountCodesConnectionPublished_at | createDiscountCodePayload | updateDiscountCodePayload | deleteDiscountCodePayload | Discount | updateDiscountPayload | deleteDiscountPayload | DpabStore | DpabStoreConnection | DpabStoreAggregator | DpabStoreGroupBy | DpabStoreConnectionId | DpabStoreConnectionCreated_at | DpabStoreConnectionUpdated_at | DpabStoreConnectionTitle | DpabStoreConnectionValue_1 | DpabStoreConnectionValue_2 | DpabStoreConnectionPublished_at | createDpabStorePayload | updateDpabStorePayload | deleteDpabStorePayload | EightProducts | EightProductsConnection | EightProductsAggregator | EightProductsGroupBy | EightProductsConnectionId | EightProductsConnectionCreated_at | EightProductsConnectionUpdated_at | EightProductsConnectionPosition | EightProductsConnectionPublished_at | createEightProductPayload | updateEightProductPayload | deleteEightProductPayload | FavoriteProduct | FavoriteProductConnection | FavoriteProductAggregator | FavoriteProductGroupBy | FavoriteProductConnectionId | FavoriteProductConnectionCreated_at | FavoriteProductConnectionUpdated_at | FavoriteProductConnectionUsers_permissions_user | FavoriteProductConnectionProduct | FavoriteProductConnectionVariants_of_a_product | FavoriteProductConnectionPublished_at | createFavoriteProductPayload | updateFavoriteProductPayload | deleteFavoriteProductPayload | FourIcons | FourIconsConnection | FourIconsAggregator | FourIconsGroupBy | FourIconsConnectionId | FourIconsConnectionCreated_at | FourIconsConnectionUpdated_at | FourIconsConnectionHeader | FourIconsConnectionText | FourIconsConnectionPublished_at | createFourIconPayload | updateFourIconPayload | deleteFourIconPayload | FourProducts | FourProductsConnection | FourProductsAggregator | FourProductsGroupBy | FourProductsConnectionId | FourProductsConnectionCreated_at | FourProductsConnectionUpdated_at | FourProductsConnectionPosition | FourProductsConnectionPublished_at | createFourProductPayload | updateFourProductPayload | deleteFourProductPayload | FragranceOccasion | FragranceOccasionConnection | FragranceOccasionAggregator | FragranceOccasionGroupBy | FragranceOccasionConnectionId | FragranceOccasionConnectionCreated_at | FragranceOccasionConnectionUpdated_at | FragranceOccasionConnectionName | FragranceOccasionConnectionPublished_at | createFragranceOccasionPayload | updateFragranceOccasionPayload | deleteFragranceOccasionPayload | GiftWrap | GiftWrapConnection | GiftWrapAggregator | GiftWrapGroupBy | GiftWrapConnectionId | GiftWrapConnectionCreated_at | GiftWrapConnectionUpdated_at | GiftWrapConnectionPrice | GiftWrapConnectionName | GiftWrapConnectionText | GiftWrapConnectionSecure | GiftWrapConnectionPublished_at | createGiftWrapPayload | updateGiftWrapPayload | deleteGiftWrapPayload | HomePagePopupContent | updateHomePagePopupContentPayload | deleteHomePagePopupContentPayload | Inspiration | InspirationConnection | InspirationAggregator | InspirationGroupBy | InspirationConnectionId | InspirationConnectionCreated_at | InspirationConnectionUpdated_at | InspirationConnectionHeader | InspirationConnectionTitle | InspirationConnectionText | InspirationConnectionButton_text | InspirationConnectionUrl | InspirationConnectionImages | InspirationConnectionImage_header | InspirationConnectionImage_title | InspirationConnectionPosition | InspirationConnectionPublished_at | createInspirationPayload | updateInspirationPayload | deleteInspirationPayload | Interieur | InterieurConnection | InterieurAggregator | InterieurGroupBy | InterieurConnectionId | InterieurConnectionCreated_at | InterieurConnectionUpdated_at | InterieurConnectionProductId | InterieurConnectionPublished_at | createInterieurPayload | updateInterieurPayload | deleteInterieurPayload | MagazinPresentation | MagazinPresentationConnection | MagazinPresentationAggregator | MagazinPresentationGroupBy | MagazinPresentationConnectionId | MagazinPresentationConnectionCreated_at | MagazinPresentationConnectionUpdated_at | MagazinPresentationConnectionImages_1 | MagazinPresentationConnectionText_1 | MagazinPresentationConnectionText_2 | MagazinPresentationConnectionImages_2 | MagazinPresentationConnectionPosition | MagazinPresentationConnectionPublished_at | createMagazinPresentationPayload | updateMagazinPresentationPayload | deleteMagazinPresentationPayload | MainAccount | MainAccountConnection | MainAccountAggregator | MainAccountGroupBy | MainAccountConnectionId | MainAccountConnectionCreated_at | MainAccountConnectionUpdated_at | MainAccountConnectionTitle | MainAccountConnectionText | MainAccountConnectionPublished_at | createMainAccountPayload | updateMainAccountPayload | deleteMainAccountPayload | MeinKonto | MeinKontoConnection | MeinKontoAggregator | MeinKontoGroupBy | MeinKontoConnectionId | MeinKontoConnectionCreated_at | MeinKontoConnectionUpdated_at | MeinKontoConnectionTitle | MeinKontoConnectionUrl | MeinKontoConnectionPublished_at | createMeinKontoPayload | updateMeinKontoPayload | deleteMeinKontoPayload | MenuItem | MenuItemConnection | MenuItemAggregator | MenuItemGroupBy | MenuItemConnectionId | MenuItemConnectionCreated_at | MenuItemConnectionUpdated_at | MenuItemConnectionItem_name | MenuItemConnectionTitle | MenuItemConnectionImages | MenuItemConnectionUrl | MenuItemConnectionPosition | MenuItemConnectionPublished_at | createMenuItemPayload | updateMenuItemPayload | deleteMenuItemPayload | MidFooter | MidFooterConnection | MidFooterAggregator | MidFooterGroupBy | MidFooterConnectionId | MidFooterConnectionCreated_at | MidFooterConnectionUpdated_at | MidFooterConnectionHeader | MidFooterConnectionImages | MidFooterConnectionText_1 | MidFooterConnectionText_2 | MidFooterConnectionText_3 | MidFooterConnectionPublished_at | createMidFooterPayload | updateMidFooterPayload | deleteMidFooterPayload | NewProductLimit | updateNewProductLimitPayload | deleteNewProductLimitPayload | NewsReport | NewsReportConnection | NewsReportAggregator | NewsReportGroupBy | NewsReportConnectionId | NewsReportConnectionCreated_at | NewsReportConnectionUpdated_at | NewsReportConnectionHeader | NewsReportConnectionTitle | NewsReportConnectionText | NewsReportConnectionUrl | NewsReportConnectionLink_text | NewsReportConnectionImages | NewsReportConnectionPosition | NewsReportConnectionPublished_at | createNewsReportPayload | updateNewsReportPayload | deleteNewsReportPayload | NewsletterText | NewsletterTextConnection | NewsletterTextAggregator | NewsletterTextGroupBy | NewsletterTextConnectionId | NewsletterTextConnectionCreated_at | NewsletterTextConnectionUpdated_at | NewsletterTextConnectionText | NewsletterTextConnectionPublished_at | createNewsletterTextPayload | updateNewsletterTextPayload | deleteNewsletterTextPayload | Newsletter | NewsletterConnection | NewsletterAggregator | NewsletterGroupBy | NewsletterConnectionId | NewsletterConnectionCreated_at | NewsletterConnectionUpdated_at | NewsletterConnectionSubject | NewsletterConnectionHTML_describe | NewsletterConnectionPublished_at | createNewsletterPayload | updateNewsletterPayload | deleteNewsletterPayload | NotFoundPageSection1 | updateNotFoundPageSection1Payload | deleteNotFoundPageSection1Payload | NotFoundPageSection2 | updateNotFoundPageSection2Payload | deleteNotFoundPageSection2Payload | NotFoundPageSection3 | NotFoundPageSection3Connection | NotFoundPageSection3Aggregator | NotFoundPageSection3GroupBy | NotFoundPageSection3ConnectionId | NotFoundPageSection3ConnectionCreated_at | NotFoundPageSection3ConnectionUpdated_at | NotFoundPageSection3ConnectionTitle | NotFoundPageSection3ConnectionDescription | NotFoundPageSection3ConnectionImage | NotFoundPageSection3ConnectionLink | NotFoundPageSection3ConnectionPublished_at | createNotFoundPageSection3Payload | updateNotFoundPageSection3Payload | deleteNotFoundPageSection3Payload | OurBankConnection | OurBankConnectionConnection | OurBankConnectionAggregator | OurBankConnectionGroupBy | OurBankConnectionConnectionId | OurBankConnectionConnectionCreated_at | OurBankConnectionConnectionUpdated_at | OurBankConnectionConnectionHeader | OurBankConnectionConnectionText | OurBankConnectionConnectionPublished_at | createOurBankConnectionPayload | updateOurBankConnectionPayload | deleteOurBankConnectionPayload | PageHeader | PageHeaderConnection | PageHeaderAggregator | PageHeaderGroupBy | PageHeaderConnectionId | PageHeaderConnectionCreated_at | PageHeaderConnectionUpdated_at | PageHeaderConnectionDescribe_HTML_CSS | PageHeaderConnectionPosition | PageHeaderConnectionPublished_at | createPageHeaderPayload | updatePageHeaderPayload | deletePageHeaderPayload | Parfums | ParfumsConnection | ParfumsAggregator | ParfumsGroupBy | ParfumsConnectionId | ParfumsConnectionCreated_at | ParfumsConnectionUpdated_at | ParfumsConnectionProductId | ParfumsConnectionPublished_at | createParfumPayload | updateParfumPayload | deleteParfumPayload | PaymentOptions | PaymentOptionsConnection | PaymentOptionsAggregator | PaymentOptionsGroupBy | PaymentOptionsConnectionId | PaymentOptionsConnectionCreated_at | PaymentOptionsConnectionUpdated_at | PaymentOptionsConnectionText | PaymentOptionsConnectionPublished_at | createPaymentOptionPayload | updatePaymentOptionPayload | deletePaymentOptionPayload | PermanentDiscount | updatePermanentDiscountPayload | deletePermanentDiscountPayload | ProductWithLeftText | ProductWithLeftTextConnection | ProductWithLeftTextAggregator | ProductWithLeftTextGroupBy | ProductWithLeftTextConnectionId | ProductWithLeftTextConnectionCreated_at | ProductWithLeftTextConnectionUpdated_at | ProductWithLeftTextConnectionHeader | ProductWithLeftTextConnectionTitle | ProductWithLeftTextConnectionText | ProductWithLeftTextConnectionButton_text | ProductWithLeftTextConnectionUrl | ProductWithLeftTextConnectionPosition | ProductWithLeftTextConnectionPublished_at | createProductWithLeftTextPayload | updateProductWithLeftTextPayload | deleteProductWithLeftTextPayload | Products | ProductsConnection | ProductsAggregator | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionClean_product | ProductsConnectionName | ProductsConnectionMagazin_presentation | ProductsConnectionKind | ProductsConnectionNew_Date_Limit | ProductsConnectionVideo | ProductsConnectionLimited_edition | ProductsConnectionVideo_description | ProductsConnectionVideo_status | ProductsConnectionVideo_name | ProductsConnectionApproved_by_DPAB | ProductsConnectionEAN_barcodes | ProductsConnectionTop_10 | ProductsConnectionFragrance_occasion | ProductsConnectionScent_note | ProductsConnectionDirection_of_fragrance | ProductsConnectionActive_ingredients | ProductsConnectionBrand | ProductsConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | QuestionOrConcern | QuestionOrConcernConnection | QuestionOrConcernAggregator | QuestionOrConcernGroupBy | QuestionOrConcernConnectionId | QuestionOrConcernConnectionCreated_at | QuestionOrConcernConnectionUpdated_at | QuestionOrConcernConnectionName | QuestionOrConcernConnectionEmail | QuestionOrConcernConnectionSubject | QuestionOrConcernConnectionOrder_ID | QuestionOrConcernConnectionMessage | QuestionOrConcernConnectionCopy_to_me | QuestionOrConcernConnectionPrivacy | QuestionOrConcernConnectionPublished_at | createQuestionOrConcernPayload | updateQuestionOrConcernPayload | deleteQuestionOrConcernPayload | RegistrationPageData | updateRegistrationPageDatumPayload | deleteRegistrationPageDatumPayload | ScentNotes | ScentNotesConnection | ScentNotesAggregator | ScentNotesGroupBy | ScentNotesConnectionId | ScentNotesConnectionCreated_at | ScentNotesConnectionUpdated_at | ScentNotesConnectionName | ScentNotesConnectionPublished_at | createScentNotePayload | updateScentNotePayload | deleteScentNotePayload | SectionUnderNavbar | SectionUnderNavbarConnection | SectionUnderNavbarAggregator | SectionUnderNavbarGroupBy | SectionUnderNavbarConnectionId | SectionUnderNavbarConnectionCreated_at | SectionUnderNavbarConnectionUpdated_at | SectionUnderNavbarConnectionHeader | SectionUnderNavbarConnectionTitle | SectionUnderNavbarConnectionButton_text | SectionUnderNavbarConnectionUrl | SectionUnderNavbarConnectionImages | SectionUnderNavbarConnectionPosition | SectionUnderNavbarConnectionPublished_at | createSectionUnderNavbarPayload | updateSectionUnderNavbarPayload | deleteSectionUnderNavbarPayload | ShippingConditions | ShippingConditionsConnection | ShippingConditionsAggregator | ShippingConditionsGroupBy | ShippingConditionsConnectionId | ShippingConditionsConnectionCreated_at | ShippingConditionsConnectionUpdated_at | ShippingConditionsConnectionHeader | ShippingConditionsConnectionText | ShippingConditionsConnectionPosition | ShippingConditionsConnectionPublished_at | createShippingConditionPayload | updateShippingConditionPayload | deleteShippingConditionPayload | ShippingMethod | updateShippingMethodPayload | deleteShippingMethodPayload | ShippingText | updateShippingTextPayload | deleteShippingTextPayload | ShopPageLargeText | ShopPageLargeTextConnection | ShopPageLargeTextAggregator | ShopPageLargeTextGroupBy | ShopPageLargeTextConnectionId | ShopPageLargeTextConnectionCreated_at | ShopPageLargeTextConnectionUpdated_at | ShopPageLargeTextConnectionHeader | ShopPageLargeTextConnectionText | ShopPageLargeTextConnectionPublished_at | createShopPageLargeTextPayload | updateShopPageLargeTextPayload | deleteShopPageLargeTextPayload | ShoppingBasketRecommendation | ShoppingBasketRecommendationConnection | ShoppingBasketRecommendationAggregator | ShoppingBasketRecommendationGroupBy | ShoppingBasketRecommendationConnectionId | ShoppingBasketRecommendationConnectionCreated_at | ShoppingBasketRecommendationConnectionUpdated_at | ShoppingBasketRecommendationConnectionTo | ShoppingBasketRecommendationConnectionFrom | ShoppingBasketRecommendationConnectionCurrent_shopping_basket_product_id | ShoppingBasketRecommendationConnectionPublished_at | createShoppingBasketRecommendationPayload | updateShoppingBasketRecommendationPayload | deleteShoppingBasketRecommendationPayload | ShoppingBasket | ShoppingBasketConnection | ShoppingBasketAggregator | ShoppingBasketGroupBy | ShoppingBasketConnectionId | ShoppingBasketConnectionCreated_at | ShoppingBasketConnectionUpdated_at | ShoppingBasketConnectionUsers_permissions_user | ShoppingBasketConnectionProduct | ShoppingBasketConnectionGift_wrap | ShoppingBasketConnectionQuantity | ShoppingBasketConnectionVariant_id | ShoppingBasketConnectionType_test | ShoppingBasketConnectionProduct_id | ShoppingBasketConnectionPublished_at | createShoppingBasketPayload | updateShoppingBasketPayload | deleteShoppingBasketPayload | StairSection | StairSectionConnection | StairSectionAggregator | StairSectionGroupBy | StairSectionConnectionId | StairSectionConnectionCreated_at | StairSectionConnectionUpdated_at | StairSectionConnectionImage | StairSectionConnectionHeader | StairSectionConnectionText | StairSectionConnectionDate | StairSectionConnectionPosition | StairSectionConnectionPublished_at | createStairSectionPayload | updateStairSectionPayload | deleteStairSectionPayload | Style | StyleConnection | StyleAggregator | StyleGroupBy | StyleConnectionId | StyleConnectionCreated_at | StyleConnectionUpdated_at | StyleConnectionImages | StyleConnectionText | StyleConnectionLink_text | StyleConnectionLink | StyleConnectionPublished_at | createStylePayload | updateStylePayload | deleteStylePayload | SubCategory | SubCategoryConnection | SubCategoryAggregator | SubCategoryGroupBy | SubCategoryConnectionId | SubCategoryConnectionCreated_at | SubCategoryConnectionUpdated_at | SubCategoryConnectionSubCategoryName | SubCategoryConnectionPublished_at | createSubCategoryPayload | updateSubCategoryPayload | deleteSubCategoryPayload | TopOfTheFooter | TopOfTheFooterConnection | TopOfTheFooterAggregator | TopOfTheFooterGroupBy | TopOfTheFooterConnectionId | TopOfTheFooterConnectionCreated_at | TopOfTheFooterConnectionUpdated_at | TopOfTheFooterConnectionImages | TopOfTheFooterConnectionHeader | TopOfTheFooterConnectionText | TopOfTheFooterConnectionPublished_at | createTopOfTheFooterPayload | updateTopOfTheFooterPayload | deleteTopOfTheFooterPayload | UserNewsletter | UserNewsletterConnection | UserNewsletterAggregator | UserNewsletterGroupBy | UserNewsletterConnectionId | UserNewsletterConnectionCreated_at | UserNewsletterConnectionUpdated_at | UserNewsletterConnectionFirst_name | UserNewsletterConnectionSurname | UserNewsletterConnectionGender | UserNewsletterConnectionEmail | UserNewsletterConnectionPublished_at | createUserNewsletterPayload | updateUserNewsletterPayload | deleteUserNewsletterPayload | VariantsOfAProduct | VariantsOfAProductConnection | VariantsOfAProductAggregator | VariantsOfAProductAggregatorSum | VariantsOfAProductAggregatorAvg | VariantsOfAProductAggregatorMin | VariantsOfAProductAggregatorMax | VariantsOfAProductGroupBy | VariantsOfAProductConnectionId | VariantsOfAProductConnectionCreated_at | VariantsOfAProductConnectionUpdated_at | VariantsOfAProductConnectionBottle_sizes | VariantsOfAProductConnectionPrice | VariantsOfAProductConnectionMain | VariantsOfAProductConnectionQuantity | VariantsOfAProductConnectionSample | VariantsOfAProductConnectionPublished_at | createVariantsOfAProductPayload | updateVariantsOfAProductPayload | deleteVariantsOfAProductPayload | Videos | VideosConnection | VideosAggregator | VideosGroupBy | VideosConnectionId | VideosConnectionCreated_at | VideosConnectionUpdated_at | VideosConnectionVideo_status | VideosConnectionVideo_name | VideosConnectionDescription | VideosConnectionUrl | VideosConnectionVideo_id | VideosConnectionBookmark | VideosConnectionPublished_at | createVideoPayload | updateVideoPayload | deleteVideoPayload | YourWishlistText | updateYourWishlistTextPayload | deleteYourWishlistTextPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionRegular_customer | UsersPermissionsUserConnectionSurname | UsersPermissionsUserConnectionCountry | UsersPermissionsUserConnectionDate | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  activeIngredient(id: ID!, publicationState: PublicationState): ActiveIngredients
  activeIngredients(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ActiveIngredients]
  activeIngredientsConnection(sort: String, limit: Int, start: Int, where: JSON): ActiveIngredientsConnection
  approvedByUs(publicationState: PublicationState): ApprovedByUs
  beauty(id: ID!, publicationState: PublicationState): Beauty
  beauties(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Beauty]
  beautiesConnection(sort: String, limit: Int, start: Int, where: JSON): BeautyConnection
  benefitsRegistrationPage(id: ID!, publicationState: PublicationState): BenefitsRegistrationPage
  benefitsRegistrationPages(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BenefitsRegistrationPage]
  benefitsRegistrationPagesConnection(sort: String, limit: Int, start: Int, where: JSON): BenefitsRegistrationPageConnection
  billingAddress(id: ID!, publicationState: PublicationState): BillingAddresses
  billingAddresses(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BillingAddresses]
  billingAddressesConnection(sort: String, limit: Int, start: Int, where: JSON): BillingAddressesConnection
  bookmark(id: ID!, publicationState: PublicationState): Bookmark
  bookmarks(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Bookmark]
  bookmarksConnection(sort: String, limit: Int, start: Int, where: JSON): BookmarkConnection
  brandPageAllDatum(publicationState: PublicationState): BrandPageAllData
  brandPageDatum(id: ID!, publicationState: PublicationState): BrandPageData
  brandPageData(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BrandPageData]
  brandPageDataConnection(sort: String, limit: Int, start: Int, where: JSON): BrandPageDataConnection
  brandPageSection3(id: ID!, publicationState: PublicationState): BrandPageSection3
  brandPageSection3s(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BrandPageSection3]
  brandPageSection3sConnection(sort: String, limit: Int, start: Int, where: JSON): BrandPageSection3Connection
  brandPageSection4(id: ID!, publicationState: PublicationState): BrandPageSection4
  brandPageSection4s(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BrandPageSection4]
  brandPageSection4sConnection(sort: String, limit: Int, start: Int, where: JSON): BrandPageSection4Connection
  brandPageSection5(id: ID!, publicationState: PublicationState): BrandPageSection5
  brandPageSection5s(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BrandPageSection5]
  brandPageSection5sConnection(sort: String, limit: Int, start: Int, where: JSON): BrandPageSection5Connection
  brand(id: ID!, publicationState: PublicationState): Brand
  brands(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Brand]
  brandsConnection(sort: String, limit: Int, start: Int, where: JSON): BrandConnection
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  collectionShop(id: ID!, publicationState: PublicationState): CollectionShop
  collectionShops(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CollectionShop]
  collectionShopsConnection(sort: String, limit: Int, start: Int, where: JSON): CollectionShopConnection
  contactDetail(id: ID!, publicationState: PublicationState): ContactDetails
  contactDetails(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ContactDetails]
  contactDetailsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactDetailsConnection
  contactPageText(publicationState: PublicationState): ContactPageText
  contact(id: ID!, publicationState: PublicationState): Contact
  contacts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Contact]
  contactsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactConnection
  countryDatum(publicationState: PublicationState): CountryData
  deliveryAddress(id: ID!, publicationState: PublicationState): DeliveryAddress
  deliveryAddresses(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [DeliveryAddress]
  deliveryAddressesConnection(sort: String, limit: Int, start: Int, where: JSON): DeliveryAddressConnection
  directionOfFragrance(id: ID!, publicationState: PublicationState): DirectionOfFragrance
  directionOfFragrances(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [DirectionOfFragrance]
  directionOfFragrancesConnection(sort: String, limit: Int, start: Int, where: JSON): DirectionOfFragranceConnection
  discountCode(id: ID!, publicationState: PublicationState): DiscountCodes
  discountCodes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [DiscountCodes]
  discountCodesConnection(sort: String, limit: Int, start: Int, where: JSON): DiscountCodesConnection
  discount(publicationState: PublicationState): Discount
  dpabStore(id: ID!, publicationState: PublicationState): DpabStore
  dpabStores(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [DpabStore]
  dpabStoresConnection(sort: String, limit: Int, start: Int, where: JSON): DpabStoreConnection
  eightProduct(id: ID!, publicationState: PublicationState): EightProducts
  eightProducts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [EightProducts]
  eightProductsConnection(sort: String, limit: Int, start: Int, where: JSON): EightProductsConnection
  favoriteProduct(id: ID!, publicationState: PublicationState): FavoriteProduct
  favoriteProducts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [FavoriteProduct]
  favoriteProductsConnection(sort: String, limit: Int, start: Int, where: JSON): FavoriteProductConnection
  fourIcon(id: ID!, publicationState: PublicationState): FourIcons
  fourIcons(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [FourIcons]
  fourIconsConnection(sort: String, limit: Int, start: Int, where: JSON): FourIconsConnection
  fourProduct(id: ID!, publicationState: PublicationState): FourProducts
  fourProducts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [FourProducts]
  fourProductsConnection(sort: String, limit: Int, start: Int, where: JSON): FourProductsConnection
  fragranceOccasion(id: ID!, publicationState: PublicationState): FragranceOccasion
  fragranceOccasions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [FragranceOccasion]
  fragranceOccasionsConnection(sort: String, limit: Int, start: Int, where: JSON): FragranceOccasionConnection
  giftWrap(id: ID!, publicationState: PublicationState): GiftWrap
  giftWraps(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [GiftWrap]
  giftWrapsConnection(sort: String, limit: Int, start: Int, where: JSON): GiftWrapConnection
  homePagePopupContent(publicationState: PublicationState): HomePagePopupContent
  inspiration(id: ID!, publicationState: PublicationState): Inspiration
  inspirations(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Inspiration]
  inspirationsConnection(sort: String, limit: Int, start: Int, where: JSON): InspirationConnection
  interieur(id: ID!, publicationState: PublicationState): Interieur
  interieurs(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Interieur]
  interieursConnection(sort: String, limit: Int, start: Int, where: JSON): InterieurConnection
  magazinPresentation(id: ID!, publicationState: PublicationState): MagazinPresentation
  magazinPresentations(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MagazinPresentation]
  magazinPresentationsConnection(sort: String, limit: Int, start: Int, where: JSON): MagazinPresentationConnection
  mainAccount(id: ID!, publicationState: PublicationState): MainAccount
  mainAccounts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MainAccount]
  mainAccountsConnection(sort: String, limit: Int, start: Int, where: JSON): MainAccountConnection
  meinKonto(id: ID!, publicationState: PublicationState): MeinKonto
  meinKontos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MeinKonto]
  meinKontosConnection(sort: String, limit: Int, start: Int, where: JSON): MeinKontoConnection
  menuItem(id: ID!, publicationState: PublicationState): MenuItem
  menuItems(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MenuItem]
  menuItemsConnection(sort: String, limit: Int, start: Int, where: JSON): MenuItemConnection
  midFooter(id: ID!, publicationState: PublicationState): MidFooter
  midFooters(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MidFooter]
  midFootersConnection(sort: String, limit: Int, start: Int, where: JSON): MidFooterConnection
  newProductLimit(publicationState: PublicationState): NewProductLimit
  newsReport(id: ID!, publicationState: PublicationState): NewsReport
  newsReports(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [NewsReport]
  newsReportsConnection(sort: String, limit: Int, start: Int, where: JSON): NewsReportConnection
  newsletterText(id: ID!, publicationState: PublicationState): NewsletterText
  newsletterTexts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [NewsletterText]
  newsletterTextsConnection(sort: String, limit: Int, start: Int, where: JSON): NewsletterTextConnection
  newsletter(id: ID!, publicationState: PublicationState): Newsletter
  newsletters(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Newsletter]
  newslettersConnection(sort: String, limit: Int, start: Int, where: JSON): NewsletterConnection
  notFoundPageSection1(publicationState: PublicationState): NotFoundPageSection1
  notFoundPageSection2(publicationState: PublicationState): NotFoundPageSection2
  notFoundPageSection3(id: ID!, publicationState: PublicationState): NotFoundPageSection3
  notFoundPageSection3s(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [NotFoundPageSection3]
  notFoundPageSection3sConnection(sort: String, limit: Int, start: Int, where: JSON): NotFoundPageSection3Connection
  ourBankConnection(id: ID!, publicationState: PublicationState): OurBankConnection
  ourBankConnections(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [OurBankConnection]
  ourBankConnectionsConnection(sort: String, limit: Int, start: Int, where: JSON): OurBankConnectionConnection
  pageHeader(id: ID!, publicationState: PublicationState): PageHeader
  pageHeaders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PageHeader]
  pageHeadersConnection(sort: String, limit: Int, start: Int, where: JSON): PageHeaderConnection
  parfum(id: ID!, publicationState: PublicationState): Parfums
  parfums(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Parfums]
  parfumsConnection(sort: String, limit: Int, start: Int, where: JSON): ParfumsConnection
  paymentOption(id: ID!, publicationState: PublicationState): PaymentOptions
  paymentOptions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PaymentOptions]
  paymentOptionsConnection(sort: String, limit: Int, start: Int, where: JSON): PaymentOptionsConnection
  permanentDiscount(publicationState: PublicationState): PermanentDiscount
  productWithLeftText(id: ID!, publicationState: PublicationState): ProductWithLeftText
  productWithLeftTexts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ProductWithLeftText]
  productWithLeftTextsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductWithLeftTextConnection
  product(id: ID!, publicationState: PublicationState): Products
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  questionOrConcern(id: ID!, publicationState: PublicationState): QuestionOrConcern
  questionOrConcerns(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [QuestionOrConcern]
  questionOrConcernsConnection(sort: String, limit: Int, start: Int, where: JSON): QuestionOrConcernConnection
  registrationPageDatum(publicationState: PublicationState): RegistrationPageData
  scentNote(id: ID!, publicationState: PublicationState): ScentNotes
  scentNotes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ScentNotes]
  scentNotesConnection(sort: String, limit: Int, start: Int, where: JSON): ScentNotesConnection
  sectionUnderNavbar(id: ID!, publicationState: PublicationState): SectionUnderNavbar
  sectionUnderNavbars(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [SectionUnderNavbar]
  sectionUnderNavbarsConnection(sort: String, limit: Int, start: Int, where: JSON): SectionUnderNavbarConnection
  shippingCondition(id: ID!, publicationState: PublicationState): ShippingConditions
  shippingConditions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ShippingConditions]
  shippingConditionsConnection(sort: String, limit: Int, start: Int, where: JSON): ShippingConditionsConnection
  shippingMethod(publicationState: PublicationState): ShippingMethod
  shippingText(publicationState: PublicationState): ShippingText
  shopPageLargeText(id: ID!, publicationState: PublicationState): ShopPageLargeText
  shopPageLargeTexts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ShopPageLargeText]
  shopPageLargeTextsConnection(sort: String, limit: Int, start: Int, where: JSON): ShopPageLargeTextConnection
  shoppingBasketRecommendation(id: ID!, publicationState: PublicationState): ShoppingBasketRecommendation
  shoppingBasketRecommendations(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ShoppingBasketRecommendation]
  shoppingBasketRecommendationsConnection(sort: String, limit: Int, start: Int, where: JSON): ShoppingBasketRecommendationConnection
  shoppingBasket(id: ID!, publicationState: PublicationState): ShoppingBasket
  shoppingBaskets(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ShoppingBasket]
  shoppingBasketsConnection(sort: String, limit: Int, start: Int, where: JSON): ShoppingBasketConnection
  stairSection(id: ID!, publicationState: PublicationState): StairSection
  stairSections(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [StairSection]
  stairSectionsConnection(sort: String, limit: Int, start: Int, where: JSON): StairSectionConnection
  style(id: ID!, publicationState: PublicationState): Style
  styles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Style]
  stylesConnection(sort: String, limit: Int, start: Int, where: JSON): StyleConnection
  subCategory(id: ID!, publicationState: PublicationState): SubCategory
  subCategories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [SubCategory]
  subCategoriesConnection(sort: String, limit: Int, start: Int, where: JSON): SubCategoryConnection
  topOfTheFooter(id: ID!, publicationState: PublicationState): TopOfTheFooter
  topOfTheFooters(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [TopOfTheFooter]
  topOfTheFootersConnection(sort: String, limit: Int, start: Int, where: JSON): TopOfTheFooterConnection
  userNewsletter(id: ID!, publicationState: PublicationState): UserNewsletter
  userNewsletters(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UserNewsletter]
  userNewslettersConnection(sort: String, limit: Int, start: Int, where: JSON): UserNewsletterConnection
  variantsOfAProduct(id: ID!, publicationState: PublicationState): VariantsOfAProduct
  variantsOfAProducts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [VariantsOfAProduct]
  variantsOfAProductsConnection(sort: String, limit: Int, start: Int, where: JSON): VariantsOfAProductConnection
  video(id: ID!, publicationState: PublicationState): Videos
  videos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Videos]
  videosConnection(sort: String, limit: Int, start: Int, where: JSON): VideosConnection
  yourWishlistText(publicationState: PublicationState): YourWishlistText
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createActiveIngredient(input: createActiveIngredientInput): createActiveIngredientPayload
  updateActiveIngredient(input: updateActiveIngredientInput): updateActiveIngredientPayload
  deleteActiveIngredient(input: deleteActiveIngredientInput): deleteActiveIngredientPayload
  updateApprovedByUs(input: updateApprovedByUsInput): updateApprovedByUsPayload
  deleteApprovedByUs: deleteApprovedByUsPayload
  createBeauty(input: createBeautyInput): createBeautyPayload
  updateBeauty(input: updateBeautyInput): updateBeautyPayload
  deleteBeauty(input: deleteBeautyInput): deleteBeautyPayload
  createBenefitsRegistrationPage(input: createBenefitsRegistrationPageInput): createBenefitsRegistrationPagePayload
  updateBenefitsRegistrationPage(input: updateBenefitsRegistrationPageInput): updateBenefitsRegistrationPagePayload
  deleteBenefitsRegistrationPage(input: deleteBenefitsRegistrationPageInput): deleteBenefitsRegistrationPagePayload
  createBillingAddress(input: createBillingAddressInput): createBillingAddressPayload
  updateBillingAddress(input: updateBillingAddressInput): updateBillingAddressPayload
  deleteBillingAddress(input: deleteBillingAddressInput): deleteBillingAddressPayload
  createBookmark(input: createBookmarkInput): createBookmarkPayload
  updateBookmark(input: updateBookmarkInput): updateBookmarkPayload
  deleteBookmark(input: deleteBookmarkInput): deleteBookmarkPayload
  updateBrandPageAllDatum(input: updateBrandPageAllDatumInput): updateBrandPageAllDatumPayload
  deleteBrandPageAllDatum: deleteBrandPageAllDatumPayload
  createBrandPageDatum(input: createBrandPageDatumInput): createBrandPageDatumPayload
  updateBrandPageDatum(input: updateBrandPageDatumInput): updateBrandPageDatumPayload
  deleteBrandPageDatum(input: deleteBrandPageDatumInput): deleteBrandPageDatumPayload
  createBrandPageSection3(input: createBrandPageSection3Input): createBrandPageSection3Payload
  updateBrandPageSection3(input: updateBrandPageSection3Input): updateBrandPageSection3Payload
  deleteBrandPageSection3(input: deleteBrandPageSection3Input): deleteBrandPageSection3Payload
  createBrandPageSection4(input: createBrandPageSection4Input): createBrandPageSection4Payload
  updateBrandPageSection4(input: updateBrandPageSection4Input): updateBrandPageSection4Payload
  deleteBrandPageSection4(input: deleteBrandPageSection4Input): deleteBrandPageSection4Payload
  createBrandPageSection5(input: createBrandPageSection5Input): createBrandPageSection5Payload
  updateBrandPageSection5(input: updateBrandPageSection5Input): updateBrandPageSection5Payload
  deleteBrandPageSection5(input: deleteBrandPageSection5Input): deleteBrandPageSection5Payload
  createBrand(input: createBrandInput): createBrandPayload
  updateBrand(input: updateBrandInput): updateBrandPayload
  deleteBrand(input: deleteBrandInput): deleteBrandPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createCollectionShop(input: createCollectionShopInput): createCollectionShopPayload
  updateCollectionShop(input: updateCollectionShopInput): updateCollectionShopPayload
  deleteCollectionShop(input: deleteCollectionShopInput): deleteCollectionShopPayload
  createContactDetail(input: createContactDetailInput): createContactDetailPayload
  updateContactDetail(input: updateContactDetailInput): updateContactDetailPayload
  deleteContactDetail(input: deleteContactDetailInput): deleteContactDetailPayload
  updateContactPageText(input: updateContactPageTextInput): updateContactPageTextPayload
  deleteContactPageText: deleteContactPageTextPayload
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  updateCountryDatum(input: updateCountryDatumInput): updateCountryDatumPayload
  deleteCountryDatum: deleteCountryDatumPayload
  createDeliveryAddress(input: createDeliveryAddressInput): createDeliveryAddressPayload
  updateDeliveryAddress(input: updateDeliveryAddressInput): updateDeliveryAddressPayload
  deleteDeliveryAddress(input: deleteDeliveryAddressInput): deleteDeliveryAddressPayload
  createDirectionOfFragrance(input: createDirectionOfFragranceInput): createDirectionOfFragrancePayload
  updateDirectionOfFragrance(input: updateDirectionOfFragranceInput): updateDirectionOfFragrancePayload
  deleteDirectionOfFragrance(input: deleteDirectionOfFragranceInput): deleteDirectionOfFragrancePayload
  createDiscountCode(input: createDiscountCodeInput): createDiscountCodePayload
  updateDiscountCode(input: updateDiscountCodeInput): updateDiscountCodePayload
  deleteDiscountCode(input: deleteDiscountCodeInput): deleteDiscountCodePayload
  updateDiscount(input: updateDiscountInput): updateDiscountPayload
  deleteDiscount: deleteDiscountPayload
  createDpabStore(input: createDpabStoreInput): createDpabStorePayload
  updateDpabStore(input: updateDpabStoreInput): updateDpabStorePayload
  deleteDpabStore(input: deleteDpabStoreInput): deleteDpabStorePayload
  createEightProduct(input: createEightProductInput): createEightProductPayload
  updateEightProduct(input: updateEightProductInput): updateEightProductPayload
  deleteEightProduct(input: deleteEightProductInput): deleteEightProductPayload
  createFavoriteProduct(input: createFavoriteProductInput): createFavoriteProductPayload
  updateFavoriteProduct(input: updateFavoriteProductInput): updateFavoriteProductPayload
  deleteFavoriteProduct(input: deleteFavoriteProductInput): deleteFavoriteProductPayload
  createFourIcon(input: createFourIconInput): createFourIconPayload
  updateFourIcon(input: updateFourIconInput): updateFourIconPayload
  deleteFourIcon(input: deleteFourIconInput): deleteFourIconPayload
  createFourProduct(input: createFourProductInput): createFourProductPayload
  updateFourProduct(input: updateFourProductInput): updateFourProductPayload
  deleteFourProduct(input: deleteFourProductInput): deleteFourProductPayload
  createFragranceOccasion(input: createFragranceOccasionInput): createFragranceOccasionPayload
  updateFragranceOccasion(input: updateFragranceOccasionInput): updateFragranceOccasionPayload
  deleteFragranceOccasion(input: deleteFragranceOccasionInput): deleteFragranceOccasionPayload
  createGiftWrap(input: createGiftWrapInput): createGiftWrapPayload
  updateGiftWrap(input: updateGiftWrapInput): updateGiftWrapPayload
  deleteGiftWrap(input: deleteGiftWrapInput): deleteGiftWrapPayload
  updateHomePagePopupContent(input: updateHomePagePopupContentInput): updateHomePagePopupContentPayload
  deleteHomePagePopupContent: deleteHomePagePopupContentPayload
  createInspiration(input: createInspirationInput): createInspirationPayload
  updateInspiration(input: updateInspirationInput): updateInspirationPayload
  deleteInspiration(input: deleteInspirationInput): deleteInspirationPayload
  createInterieur(input: createInterieurInput): createInterieurPayload
  updateInterieur(input: updateInterieurInput): updateInterieurPayload
  deleteInterieur(input: deleteInterieurInput): deleteInterieurPayload
  createMagazinPresentation(input: createMagazinPresentationInput): createMagazinPresentationPayload
  updateMagazinPresentation(input: updateMagazinPresentationInput): updateMagazinPresentationPayload
  deleteMagazinPresentation(input: deleteMagazinPresentationInput): deleteMagazinPresentationPayload
  createMainAccount(input: createMainAccountInput): createMainAccountPayload
  updateMainAccount(input: updateMainAccountInput): updateMainAccountPayload
  deleteMainAccount(input: deleteMainAccountInput): deleteMainAccountPayload
  createMeinKonto(input: createMeinKontoInput): createMeinKontoPayload
  updateMeinKonto(input: updateMeinKontoInput): updateMeinKontoPayload
  deleteMeinKonto(input: deleteMeinKontoInput): deleteMeinKontoPayload
  createMenuItem(input: createMenuItemInput): createMenuItemPayload
  updateMenuItem(input: updateMenuItemInput): updateMenuItemPayload
  deleteMenuItem(input: deleteMenuItemInput): deleteMenuItemPayload
  createMidFooter(input: createMidFooterInput): createMidFooterPayload
  updateMidFooter(input: updateMidFooterInput): updateMidFooterPayload
  deleteMidFooter(input: deleteMidFooterInput): deleteMidFooterPayload
  updateNewProductLimit(input: updateNewProductLimitInput): updateNewProductLimitPayload
  deleteNewProductLimit: deleteNewProductLimitPayload
  createNewsReport(input: createNewsReportInput): createNewsReportPayload
  updateNewsReport(input: updateNewsReportInput): updateNewsReportPayload
  deleteNewsReport(input: deleteNewsReportInput): deleteNewsReportPayload
  createNewsletterText(input: createNewsletterTextInput): createNewsletterTextPayload
  updateNewsletterText(input: updateNewsletterTextInput): updateNewsletterTextPayload
  deleteNewsletterText(input: deleteNewsletterTextInput): deleteNewsletterTextPayload
  createNewsletter(input: createNewsletterInput): createNewsletterPayload
  updateNewsletter(input: updateNewsletterInput): updateNewsletterPayload
  deleteNewsletter(input: deleteNewsletterInput): deleteNewsletterPayload
  updateNotFoundPageSection1(input: updateNotFoundPageSection1Input): updateNotFoundPageSection1Payload
  deleteNotFoundPageSection1: deleteNotFoundPageSection1Payload
  updateNotFoundPageSection2(input: updateNotFoundPageSection2Input): updateNotFoundPageSection2Payload
  deleteNotFoundPageSection2: deleteNotFoundPageSection2Payload
  createNotFoundPageSection3(input: createNotFoundPageSection3Input): createNotFoundPageSection3Payload
  updateNotFoundPageSection3(input: updateNotFoundPageSection3Input): updateNotFoundPageSection3Payload
  deleteNotFoundPageSection3(input: deleteNotFoundPageSection3Input): deleteNotFoundPageSection3Payload
  createOurBankConnection(input: createOurBankConnectionInput): createOurBankConnectionPayload
  updateOurBankConnection(input: updateOurBankConnectionInput): updateOurBankConnectionPayload
  deleteOurBankConnection(input: deleteOurBankConnectionInput): deleteOurBankConnectionPayload
  createPageHeader(input: createPageHeaderInput): createPageHeaderPayload
  updatePageHeader(input: updatePageHeaderInput): updatePageHeaderPayload
  deletePageHeader(input: deletePageHeaderInput): deletePageHeaderPayload
  createParfum(input: createParfumInput): createParfumPayload
  updateParfum(input: updateParfumInput): updateParfumPayload
  deleteParfum(input: deleteParfumInput): deleteParfumPayload
  createPaymentOption(input: createPaymentOptionInput): createPaymentOptionPayload
  updatePaymentOption(input: updatePaymentOptionInput): updatePaymentOptionPayload
  deletePaymentOption(input: deletePaymentOptionInput): deletePaymentOptionPayload
  updatePermanentDiscount(input: updatePermanentDiscountInput): updatePermanentDiscountPayload
  deletePermanentDiscount: deletePermanentDiscountPayload
  createProductWithLeftText(input: createProductWithLeftTextInput): createProductWithLeftTextPayload
  updateProductWithLeftText(input: updateProductWithLeftTextInput): updateProductWithLeftTextPayload
  deleteProductWithLeftText(input: deleteProductWithLeftTextInput): deleteProductWithLeftTextPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createQuestionOrConcern(input: createQuestionOrConcernInput): createQuestionOrConcernPayload
  updateQuestionOrConcern(input: updateQuestionOrConcernInput): updateQuestionOrConcernPayload
  deleteQuestionOrConcern(input: deleteQuestionOrConcernInput): deleteQuestionOrConcernPayload
  updateRegistrationPageDatum(input: updateRegistrationPageDatumInput): updateRegistrationPageDatumPayload
  deleteRegistrationPageDatum: deleteRegistrationPageDatumPayload
  createScentNote(input: createScentNoteInput): createScentNotePayload
  updateScentNote(input: updateScentNoteInput): updateScentNotePayload
  deleteScentNote(input: deleteScentNoteInput): deleteScentNotePayload
  createSectionUnderNavbar(input: createSectionUnderNavbarInput): createSectionUnderNavbarPayload
  updateSectionUnderNavbar(input: updateSectionUnderNavbarInput): updateSectionUnderNavbarPayload
  deleteSectionUnderNavbar(input: deleteSectionUnderNavbarInput): deleteSectionUnderNavbarPayload
  createShippingCondition(input: createShippingConditionInput): createShippingConditionPayload
  updateShippingCondition(input: updateShippingConditionInput): updateShippingConditionPayload
  deleteShippingCondition(input: deleteShippingConditionInput): deleteShippingConditionPayload
  updateShippingMethod(input: updateShippingMethodInput): updateShippingMethodPayload
  deleteShippingMethod: deleteShippingMethodPayload
  updateShippingText(input: updateShippingTextInput): updateShippingTextPayload
  deleteShippingText: deleteShippingTextPayload
  createShopPageLargeText(input: createShopPageLargeTextInput): createShopPageLargeTextPayload
  updateShopPageLargeText(input: updateShopPageLargeTextInput): updateShopPageLargeTextPayload
  deleteShopPageLargeText(input: deleteShopPageLargeTextInput): deleteShopPageLargeTextPayload
  createShoppingBasketRecommendation(input: createShoppingBasketRecommendationInput): createShoppingBasketRecommendationPayload
  updateShoppingBasketRecommendation(input: updateShoppingBasketRecommendationInput): updateShoppingBasketRecommendationPayload
  deleteShoppingBasketRecommendation(input: deleteShoppingBasketRecommendationInput): deleteShoppingBasketRecommendationPayload
  createShoppingBasket(input: createShoppingBasketInput): createShoppingBasketPayload
  updateShoppingBasket(input: updateShoppingBasketInput): updateShoppingBasketPayload
  deleteShoppingBasket(input: deleteShoppingBasketInput): deleteShoppingBasketPayload
  createStairSection(input: createStairSectionInput): createStairSectionPayload
  updateStairSection(input: updateStairSectionInput): updateStairSectionPayload
  deleteStairSection(input: deleteStairSectionInput): deleteStairSectionPayload
  createStyle(input: createStyleInput): createStylePayload
  updateStyle(input: updateStyleInput): updateStylePayload
  deleteStyle(input: deleteStyleInput): deleteStylePayload
  createSubCategory(input: createSubCategoryInput): createSubCategoryPayload
  updateSubCategory(input: updateSubCategoryInput): updateSubCategoryPayload
  deleteSubCategory(input: deleteSubCategoryInput): deleteSubCategoryPayload
  createTopOfTheFooter(input: createTopOfTheFooterInput): createTopOfTheFooterPayload
  updateTopOfTheFooter(input: updateTopOfTheFooterInput): updateTopOfTheFooterPayload
  deleteTopOfTheFooter(input: deleteTopOfTheFooterInput): deleteTopOfTheFooterPayload
  createUserNewsletter(input: createUserNewsletterInput): createUserNewsletterPayload
  updateUserNewsletter(input: updateUserNewsletterInput): updateUserNewsletterPayload
  deleteUserNewsletter(input: deleteUserNewsletterInput): deleteUserNewsletterPayload
  createVariantsOfAProduct(input: createVariantsOfAProductInput): createVariantsOfAProductPayload
  updateVariantsOfAProduct(input: updateVariantsOfAProductInput): updateVariantsOfAProductPayload
  deleteVariantsOfAProduct(input: deleteVariantsOfAProductInput): deleteVariantsOfAProductPayload
  createVideo(input: createVideoInput): createVideoPayload
  updateVideo(input: updateVideoInput): updateVideoPayload
  deleteVideo(input: deleteVideoInput): deleteVideoPayload
  updateYourWishlistText(input: updateYourWishlistTextInput): updateYourWishlistTextPayload
  deleteYourWishlistText: deleteYourWishlistTextPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
